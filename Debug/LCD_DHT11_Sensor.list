
LCD_DHT11_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003584  08003584  00004584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003660  08003660  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003660  08003660  00004660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003668  08003668  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003668  08003668  00004668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800366c  0800366c  0000466c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003670  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000005c  080036cc  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  080036cc  00005210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6ad  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f77  00000000  00000000  0000f739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  000116b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a40  00000000  00000000  00012420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001893c  00000000  00000000  00012e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbb0  00000000  00000000  0002b79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097203  00000000  00000000  0003934c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d054f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cd0  00000000  00000000  000d0594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000d4264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800356c 	.word	0x0800356c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800356c 	.word	0x0800356c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <celcius_to_fahrenheit>:
   * 9. repeats until finished, then voltage pulls up and ready to read
   */

#define B9_PinState ((GPIOB->IDR >> 9)&0x1)

uint8_t celcius_to_fahrenheit(uint8_t temp_C){
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	float temp_f = (temp_C * 9.0f / 5.0f) + 32.0f;
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	ee07 3a90 	vmov	s15, r3
 80005bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c0:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 80005c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80005c8:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80005cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005d0:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80005f8 <celcius_to_fahrenheit+0x4c>
 80005d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005d8:	edc7 7a03 	vstr	s15, [r7, #12]

	return (uint8_t)temp_f;
 80005dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80005e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005e4:	edc7 7a00 	vstr	s15, [r7]
 80005e8:	783b      	ldrb	r3, [r7, #0]
 80005ea:	b2db      	uxtb	r3, r3
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3714      	adds	r7, #20
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	42000000 	.word	0x42000000

080005fc <DHT11_GET_BITS>:

void DHT11_GET_BITS(DHT11_Data *return_data){
 80005fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000600:	b08b      	sub	sp, #44	@ 0x2c
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
	uint8_t bits_recieved = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint64_t bit_stream = 0;
 800060c:	f04f 0200 	mov.w	r2, #0
 8000610:	f04f 0300 	mov.w	r3, #0
 8000614:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint8_t checksum;
	uint8_t computed;

	while(bits_recieved < 40){
 8000618:	e048      	b.n	80006ac <DHT11_GET_BITS+0xb0>
		uint32_t timeout = 100;
 800061a:	2364      	movs	r3, #100	@ 0x64
 800061c:	617b      	str	r3, [r7, #20]

		// wait until pin is high
		while(!B9_PinState && timeout--) delay_us(1);
 800061e:	e002      	b.n	8000626 <DHT11_GET_BITS+0x2a>
 8000620:	2001      	movs	r0, #1
 8000622:	f000 fd4f 	bl	80010c4 <delay_us>
 8000626:	4b53      	ldr	r3, [pc, #332]	@ (8000774 <DHT11_GET_BITS+0x178>)
 8000628:	691b      	ldr	r3, [r3, #16]
 800062a:	0a5b      	lsrs	r3, r3, #9
 800062c:	f003 0301 	and.w	r3, r3, #1
 8000630:	2b00      	cmp	r3, #0
 8000632:	d104      	bne.n	800063e <DHT11_GET_BITS+0x42>
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	1e5a      	subs	r2, r3, #1
 8000638:	617a      	str	r2, [r7, #20]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1f0      	bne.n	8000620 <DHT11_GET_BITS+0x24>
		if(timeout == 0) return; // time out error
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	2b00      	cmp	r3, #0
 8000642:	f000 808f 	beq.w	8000764 <DHT11_GET_BITS+0x168>

		// delay 40, if its still high, its a 1, if its LOW, its a 0
		delay_us(40);
 8000646:	2028      	movs	r0, #40	@ 0x28
 8000648:	f000 fd3c 	bl	80010c4 <delay_us>

		// shift bits to the left, then add the bit
		bit_stream = bit_stream << 1;
 800064c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000650:	eb12 0802 	adds.w	r8, r2, r2
 8000654:	eb43 0903 	adc.w	r9, r3, r3
 8000658:	e9c7 8906 	strd	r8, r9, [r7, #24]
		if(B9_PinState)
 800065c:	4b45      	ldr	r3, [pc, #276]	@ (8000774 <DHT11_GET_BITS+0x178>)
 800065e:	691b      	ldr	r3, [r3, #16]
 8000660:	0a5b      	lsrs	r3, r3, #9
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	2b00      	cmp	r3, #0
 8000668:	d006      	beq.n	8000678 <DHT11_GET_BITS+0x7c>
			bit_stream |= 1;
 800066a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800066e:	f042 0a01 	orr.w	sl, r2, #1
 8000672:	469b      	mov	fp, r3
 8000674:	e9c7 ab06 	strd	sl, fp, [r7, #24]

		bits_recieved++;
 8000678:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800067c:	3301      	adds	r3, #1
 800067e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		// wait until line goes LOW again to start next bit
		timeout = 100;
 8000682:	2364      	movs	r3, #100	@ 0x64
 8000684:	617b      	str	r3, [r7, #20]
		while(B9_PinState && timeout--) delay_us(1);
 8000686:	e002      	b.n	800068e <DHT11_GET_BITS+0x92>
 8000688:	2001      	movs	r0, #1
 800068a:	f000 fd1b 	bl	80010c4 <delay_us>
 800068e:	4b39      	ldr	r3, [pc, #228]	@ (8000774 <DHT11_GET_BITS+0x178>)
 8000690:	691b      	ldr	r3, [r3, #16]
 8000692:	0a5b      	lsrs	r3, r3, #9
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	2b00      	cmp	r3, #0
 800069a:	d004      	beq.n	80006a6 <DHT11_GET_BITS+0xaa>
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	1e5a      	subs	r2, r3, #1
 80006a0:	617a      	str	r2, [r7, #20]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1f0      	bne.n	8000688 <DHT11_GET_BITS+0x8c>
		if (timeout == 0) return;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d05d      	beq.n	8000768 <DHT11_GET_BITS+0x16c>
	while(bits_recieved < 40){
 80006ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006b0:	2b27      	cmp	r3, #39	@ 0x27
 80006b2:	d9b2      	bls.n	800061a <DHT11_GET_BITS+0x1e>

	}

	// extract 5 bytes
    uint8_t data[5];
    for (int i = 0; i < 5; i++) {
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	e01d      	b.n	80006f6 <DHT11_GET_BITS+0xfa>
        data[i] = (bit_stream >> ((4 - i) * 8)) & 0xFF;
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	f1c3 0304 	rsb	r3, r3, #4
 80006c0:	00d9      	lsls	r1, r3, #3
 80006c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80006c6:	f1c1 0620 	rsb	r6, r1, #32
 80006ca:	f1a1 0020 	sub.w	r0, r1, #32
 80006ce:	fa22 f401 	lsr.w	r4, r2, r1
 80006d2:	fa03 f606 	lsl.w	r6, r3, r6
 80006d6:	4334      	orrs	r4, r6
 80006d8:	fa23 f000 	lsr.w	r0, r3, r0
 80006dc:	4304      	orrs	r4, r0
 80006de:	fa23 f501 	lsr.w	r5, r3, r1
 80006e2:	b2e1      	uxtb	r1, r4
 80006e4:	f107 0208 	add.w	r2, r7, #8
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	4413      	add	r3, r2
 80006ec:	460a      	mov	r2, r1
 80006ee:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 5; i++) {
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	3301      	adds	r3, #1
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	2b04      	cmp	r3, #4
 80006fa:	ddde      	ble.n	80006ba <DHT11_GET_BITS+0xbe>
    }

    checksum = data[4];
 80006fc:	7b3b      	ldrb	r3, [r7, #12]
 80006fe:	73fb      	strb	r3, [r7, #15]
    computed = (data[0] + data[1] + data[2] + data[3]) & 0xFF;
 8000700:	7a3a      	ldrb	r2, [r7, #8]
 8000702:	7a7b      	ldrb	r3, [r7, #9]
 8000704:	4413      	add	r3, r2
 8000706:	b2da      	uxtb	r2, r3
 8000708:	7abb      	ldrb	r3, [r7, #10]
 800070a:	4413      	add	r3, r2
 800070c:	b2da      	uxtb	r2, r3
 800070e:	7afb      	ldrb	r3, [r7, #11]
 8000710:	4413      	add	r3, r2
 8000712:	73bb      	strb	r3, [r7, #14]

    if(checksum == computed){
 8000714:	7bfa      	ldrb	r2, [r7, #15]
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	429a      	cmp	r2, r3
 800071a:	d116      	bne.n	800074a <DHT11_GET_BITS+0x14e>
    	return_data->humidity_int = data[0];
 800071c:	7a3a      	ldrb	r2, [r7, #8]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	701a      	strb	r2, [r3, #0]
    	return_data->humidity_dec = data[1];
 8000722:	7a7a      	ldrb	r2, [r7, #9]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	705a      	strb	r2, [r3, #1]
    	return_data->temp_int = celcius_to_fahrenheit(data[2]);
 8000728:	7abb      	ldrb	r3, [r7, #10]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff3e 	bl	80005ac <celcius_to_fahrenheit>
 8000730:	4603      	mov	r3, r0
 8000732:	461a      	mov	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	709a      	strb	r2, [r3, #2]
    	return_data->temp_dec= celcius_to_fahrenheit(data[3]);
 8000738:	7afb      	ldrb	r3, [r7, #11]
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff36 	bl	80005ac <celcius_to_fahrenheit>
 8000740:	4603      	mov	r3, r0
 8000742:	461a      	mov	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	70da      	strb	r2, [r3, #3]
 8000748:	e00f      	b.n	800076a <DHT11_GET_BITS+0x16e>
    }
    else{
    	return_data->humidity_int = 0xFF;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	22ff      	movs	r2, #255	@ 0xff
 800074e:	701a      	strb	r2, [r3, #0]
    	return_data->humidity_dec= 0xFF;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	22ff      	movs	r2, #255	@ 0xff
 8000754:	705a      	strb	r2, [r3, #1]
    	return_data->temp_int = 0xFF;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	22ff      	movs	r2, #255	@ 0xff
 800075a:	709a      	strb	r2, [r3, #2]
    	return_data->temp_dec= 0xFF;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	22ff      	movs	r2, #255	@ 0xff
 8000760:	70da      	strb	r2, [r3, #3]
 8000762:	e002      	b.n	800076a <DHT11_GET_BITS+0x16e>
		if(timeout == 0) return; // time out error
 8000764:	bf00      	nop
 8000766:	e000      	b.n	800076a <DHT11_GET_BITS+0x16e>
		if (timeout == 0) return;
 8000768:	bf00      	nop
    }
}
 800076a:	372c      	adds	r7, #44	@ 0x2c
 800076c:	46bd      	mov	sp, r7
 800076e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000772:	bf00      	nop
 8000774:	40020400 	.word	0x40020400

08000778 <DHT11_READ>:

DHT11_Data DHT11_READ(){
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
	DHT11_Data return_data = {0};
 800077e:	2300      	movs	r3, #0
 8000780:	603b      	str	r3, [r7, #0]

	// GPIO set as output, already pulled high
	GPIOB->MODER &= ~GPIO_MODER_MODER9_Msk; // reset
 8000782:	4b27      	ldr	r3, [pc, #156]	@ (8000820 <DHT11_READ+0xa8>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a26      	ldr	r2, [pc, #152]	@ (8000820 <DHT11_READ+0xa8>)
 8000788:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800078c:	6013      	str	r3, [r2, #0]

	GPIOB->MODER |= (1U << GPIO_MODER_MODE9_Pos);  // shift 1 to the 18th bit
 800078e:	4b24      	ldr	r3, [pc, #144]	@ (8000820 <DHT11_READ+0xa8>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a23      	ldr	r2, [pc, #140]	@ (8000820 <DHT11_READ+0xa8>)
 8000794:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000798:	6013      	str	r3, [r2, #0]

	// GPIO Set as Open Drain
	GPIOB->OTYPER |= (1U << GPIO_OTYPER_OT9_Pos);
 800079a:	4b21      	ldr	r3, [pc, #132]	@ (8000820 <DHT11_READ+0xa8>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	4a20      	ldr	r2, [pc, #128]	@ (8000820 <DHT11_READ+0xa8>)
 80007a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007a4:	6053      	str	r3, [r2, #4]

	// GPIO pulls low, now wait 18ms
	GPIOB->ODR &= ~GPIO_ODR_OD9_Msk;
 80007a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000820 <DHT11_READ+0xa8>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	4a1d      	ldr	r2, [pc, #116]	@ (8000820 <DHT11_READ+0xa8>)
 80007ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80007b0:	6153      	str	r3, [r2, #20]

	// wait until CNT is 20ms (each tick is 1uS, so 18,000 us)
	delay_us(20000);
 80007b2:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80007b6:	f000 fc85 	bl	80010c4 <delay_us>

	// set as INPUT (also pulls up due to open drain mode) and wait for response
	GPIOB->MODER &= ~GPIO_MODER_MODER9_Msk; // reset
 80007ba:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <DHT11_READ+0xa8>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a18      	ldr	r2, [pc, #96]	@ (8000820 <DHT11_READ+0xa8>)
 80007c0:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80007c4:	6013      	str	r3, [r2, #0]

	// delay 40, DHT should be sending a response now
	delay_us(40);
 80007c6:	2028      	movs	r0, #40	@ 0x28
 80007c8:	f000 fc7c 	bl	80010c4 <delay_us>

	// middle of DHT pulling low, wait until DHT sends high
	delay_us(40);
 80007cc:	2028      	movs	r0, #40	@ 0x28
 80007ce:	f000 fc79 	bl	80010c4 <delay_us>

	// while B9 is low, wait
	while(!B9_PinState);
 80007d2:	bf00      	nop
 80007d4:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <DHT11_READ+0xa8>)
 80007d6:	691b      	ldr	r3, [r3, #16]
 80007d8:	0a5b      	lsrs	r3, r3, #9
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d0f8      	beq.n	80007d4 <DHT11_READ+0x5c>

	// now is high, next low will signal a bit
	while(B9_PinState);
 80007e2:	bf00      	nop
 80007e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <DHT11_READ+0xa8>)
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	0a5b      	lsrs	r3, r3, #9
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d1f8      	bne.n	80007e4 <DHT11_READ+0x6c>

	DHT11_GET_BITS(&return_data);
 80007f2:	463b      	mov	r3, r7
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff01 	bl	80005fc <DHT11_GET_BITS>

	return (return_data);
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	2300      	movs	r3, #0
 8000800:	793a      	ldrb	r2, [r7, #4]
 8000802:	f362 0307 	bfi	r3, r2, #0, #8
 8000806:	797a      	ldrb	r2, [r7, #5]
 8000808:	f362 230f 	bfi	r3, r2, #8, #8
 800080c:	79ba      	ldrb	r2, [r7, #6]
 800080e:	f362 4317 	bfi	r3, r2, #16, #8
 8000812:	79fa      	ldrb	r2, [r7, #7]
 8000814:	f362 631f 	bfi	r3, r2, #24, #8
}
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40020400 	.word	0x40020400

08000824 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	619a      	str	r2, [r3, #24]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	041a      	lsls	r2, r3, #16
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	619a      	str	r2, [r3, #24]
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <LCD_WRITE_PIN>:
 *      Author: Zhang
 */

#include "lcd.h"

void LCD_WRITE_PIN(LCD_PIN* pin, uint8_t state){
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	460b      	mov	r3, r1
 8000868:	70fb      	strb	r3, [r7, #3]
	state ? LL_GPIO_SetOutputPin(pin->port, pin->pin) : LL_GPIO_ResetOutputPin(pin->port, pin->pin);
 800086a:	78fb      	ldrb	r3, [r7, #3]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d008      	beq.n	8000882 <LCD_WRITE_PIN+0x24>
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	4619      	mov	r1, r3
 800087a:	4610      	mov	r0, r2
 800087c:	f7ff ffd2 	bl	8000824 <LL_GPIO_SetOutputPin>
}
 8000880:	e007      	b.n	8000892 <LCD_WRITE_PIN+0x34>
	state ? LL_GPIO_SetOutputPin(pin->port, pin->pin) : LL_GPIO_ResetOutputPin(pin->port, pin->pin);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	4619      	mov	r1, r3
 800088c:	4610      	mov	r0, r2
 800088e:	f7ff ffd7 	bl	8000840 <LL_GPIO_ResetOutputPin>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <LCD_PulseEnable>:

void LCD_PulseEnable(LCD* lcd) {
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
	LCD_WRITE_PIN(&(lcd->e), 1);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3308      	adds	r3, #8
 80008a6:	2101      	movs	r1, #1
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ffd8 	bl	800085e <LCD_WRITE_PIN>
    delay_us(2);
 80008ae:	2002      	movs	r0, #2
 80008b0:	f000 fc08 	bl	80010c4 <delay_us>
	LCD_WRITE_PIN(&(lcd->e), 0);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3308      	adds	r3, #8
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ffcf 	bl	800085e <LCD_WRITE_PIN>
    delay_us(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f000 fbff 	bl	80010c4 <delay_us>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <LCD_WRITE_8>:

void LCD_WRITE_8(LCD* lcd, uint8_t data) {
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
 80008d6:	460b      	mov	r3, r1
 80008d8:	70fb      	strb	r3, [r7, #3]
    LCD_WRITE_PIN(&(lcd->d7), (data >> 7) & 1);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f103 0210 	add.w	r2, r3, #16
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	09db      	lsrs	r3, r3, #7
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	4619      	mov	r1, r3
 80008e8:	4610      	mov	r0, r2
 80008ea:	f7ff ffb8 	bl	800085e <LCD_WRITE_PIN>
    LCD_WRITE_PIN(&(lcd->d6), (data >> 6) & 1);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f103 0218 	add.w	r2, r3, #24
 80008f4:	78fb      	ldrb	r3, [r7, #3]
 80008f6:	099b      	lsrs	r3, r3, #6
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	4619      	mov	r1, r3
 8000902:	4610      	mov	r0, r2
 8000904:	f7ff ffab 	bl	800085e <LCD_WRITE_PIN>
    LCD_WRITE_PIN(&(lcd->d5), (data >> 5) & 1);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f103 0220 	add.w	r2, r3, #32
 800090e:	78fb      	ldrb	r3, [r7, #3]
 8000910:	095b      	lsrs	r3, r3, #5
 8000912:	b2db      	uxtb	r3, r3
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	b2db      	uxtb	r3, r3
 800091a:	4619      	mov	r1, r3
 800091c:	4610      	mov	r0, r2
 800091e:	f7ff ff9e 	bl	800085e <LCD_WRITE_PIN>
    LCD_WRITE_PIN(&(lcd->d4), (data >> 4) & 1);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	091b      	lsrs	r3, r3, #4
 800092c:	b2db      	uxtb	r3, r3
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	b2db      	uxtb	r3, r3
 8000934:	4619      	mov	r1, r3
 8000936:	4610      	mov	r0, r2
 8000938:	f7ff ff91 	bl	800085e <LCD_WRITE_PIN>
    LCD_WRITE_PIN(&(lcd->d3), (data >> 3) & 1);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8000942:	78fb      	ldrb	r3, [r7, #3]
 8000944:	08db      	lsrs	r3, r3, #3
 8000946:	b2db      	uxtb	r3, r3
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	b2db      	uxtb	r3, r3
 800094e:	4619      	mov	r1, r3
 8000950:	4610      	mov	r0, r2
 8000952:	f7ff ff84 	bl	800085e <LCD_WRITE_PIN>
    LCD_WRITE_PIN(&(lcd->d2), (data >> 2) & 1);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800095c:	78fb      	ldrb	r3, [r7, #3]
 800095e:	089b      	lsrs	r3, r3, #2
 8000960:	b2db      	uxtb	r3, r3
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	4619      	mov	r1, r3
 800096a:	4610      	mov	r0, r2
 800096c:	f7ff ff77 	bl	800085e <LCD_WRITE_PIN>
    LCD_WRITE_PIN(&(lcd->d1), (data >> 1) & 1);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8000976:	78fb      	ldrb	r3, [r7, #3]
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	b2db      	uxtb	r3, r3
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	b2db      	uxtb	r3, r3
 8000982:	4619      	mov	r1, r3
 8000984:	4610      	mov	r0, r2
 8000986:	f7ff ff6a 	bl	800085e <LCD_WRITE_PIN>
    LCD_WRITE_PIN(&(lcd->d0), (data >> 0) & 1);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8000990:	78fb      	ldrb	r3, [r7, #3]
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	b2db      	uxtb	r3, r3
 8000998:	4619      	mov	r1, r3
 800099a:	4610      	mov	r0, r2
 800099c:	f7ff ff5f 	bl	800085e <LCD_WRITE_PIN>

    LCD_PulseEnable(lcd);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ff7a 	bl	800089a <LCD_PulseEnable>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <LCD_RUN_CMD>:

void LCD_RUN_CMD(LCD* lcd, uint8_t rs, uint8_t rw, uint8_t data){
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
 80009b6:	4608      	mov	r0, r1
 80009b8:	4611      	mov	r1, r2
 80009ba:	461a      	mov	r2, r3
 80009bc:	4603      	mov	r3, r0
 80009be:	70fb      	strb	r3, [r7, #3]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70bb      	strb	r3, [r7, #2]
 80009c4:	4613      	mov	r3, r2
 80009c6:	707b      	strb	r3, [r7, #1]
	// if writing, don't run command
	if (rw != 0 ) return;
 80009c8:	78bb      	ldrb	r3, [r7, #2]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d10e      	bne.n	80009ec <LCD_RUN_CMD+0x3e>

	LCD_WRITE_PIN(&(lcd->rs), rs);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	78fa      	ldrb	r2, [r7, #3]
 80009d2:	4611      	mov	r1, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff42 	bl	800085e <LCD_WRITE_PIN>

	LCD_WRITE_8(lcd, data);
 80009da:	787b      	ldrb	r3, [r7, #1]
 80009dc:	4619      	mov	r1, r3
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff ff75 	bl	80008ce <LCD_WRITE_8>

	delay_us(40);
 80009e4:	2028      	movs	r0, #40	@ 0x28
 80009e6:	f000 fb6d 	bl	80010c4 <delay_us>
 80009ea:	e000      	b.n	80009ee <LCD_RUN_CMD+0x40>
	if (rw != 0 ) return;
 80009ec:	bf00      	nop
}
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <LCD_INIT>:

void LCD_INIT(LCD* lcd){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	LL_mDelay(50); // give time for power on
 80009fc:	2032      	movs	r0, #50	@ 0x32
 80009fe:	f002 f8e7 	bl	8002bd0 <LL_mDelay>

	LCD_RUN_CMD(lcd, 0, 0, 0b00000001); // clear display
 8000a02:	2301      	movs	r3, #1
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff ffd0 	bl	80009ae <LCD_RUN_CMD>
	LL_mDelay(2);
 8000a0e:	2002      	movs	r0, #2
 8000a10:	f002 f8de 	bl	8002bd0 <LL_mDelay>

	LCD_RUN_CMD(lcd, 0, 0, 0b00111000); // function set to 8 bit, 2 line display, 5x8 dot character font
 8000a14:	2338      	movs	r3, #56	@ 0x38
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff ffc7 	bl	80009ae <LCD_RUN_CMD>
	LCD_RUN_CMD(lcd, 0, 0, 0b00001100); // turns on display
 8000a20:	230c      	movs	r3, #12
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff ffc1 	bl	80009ae <LCD_RUN_CMD>
	LCD_RUN_CMD(lcd, 0, 0, 0b00000110); // sets to increment by one, shift to right
 8000a2c:	2306      	movs	r3, #6
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ffbb 	bl	80009ae <LCD_RUN_CMD>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <LCD_CLEAR>:

void LCD_CLEAR(LCD* lcd){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	LCD_RUN_CMD(lcd, 0, 0, 0b00000001); // clear display
 8000a48:	2301      	movs	r3, #1
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff ffad 	bl	80009ae <LCD_RUN_CMD>
	LL_mDelay(2);
 8000a54:	2002      	movs	r0, #2
 8000a56:	f002 f8bb 	bl	8002bd0 <LL_mDelay>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <LCD_PRINT>:

// function to print char string to LCD
void LCD_PRINT(LCD* lcd, char * string){
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b084      	sub	sp, #16
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	6039      	str	r1, [r7, #0]
	LCD_WRITE_PIN(&(lcd->rs), 1);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2101      	movs	r1, #1
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fef4 	bl	800085e <LCD_WRITE_PIN>

	uint8_t count = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	73fb      	strb	r3, [r7, #15]

	while (*string){
 8000a7a:	e01b      	b.n	8000ab4 <LCD_PRINT+0x52>
		if (count == 16){
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	2b10      	cmp	r3, #16
 8000a80:	d105      	bne.n	8000a8e <LCD_PRINT+0x2c>
			LCD_RUN_CMD(lcd, 0, 0, 0b11000000);
 8000a82:	23c0      	movs	r3, #192	@ 0xc0
 8000a84:	2200      	movs	r2, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ff90 	bl	80009ae <LCD_RUN_CMD>
		}

		LCD_WRITE_PIN(&(lcd->rs), 1);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2101      	movs	r1, #1
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fee3 	bl	800085e <LCD_WRITE_PIN>
		LCD_WRITE_8(lcd, (uint8_t)*string++);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	603a      	str	r2, [r7, #0]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff ff13 	bl	80008ce <LCD_WRITE_8>
		delay_us(40);
 8000aa8:	2028      	movs	r0, #40	@ 0x28
 8000aaa:	f000 fb0b 	bl	80010c4 <delay_us>
		count++;
 8000aae:	7bfb      	ldrb	r3, [r7, #15]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	73fb      	strb	r3, [r7, #15]
	while (*string){
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1df      	bne.n	8000a7c <LCD_PRINT+0x1a>
	}
}
 8000abc:	bf00      	nop
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <LCD_SET_CURSOR_POS>:

// 0 indexed row and column
void LCD_SET_CURSOR_POS(LCD* lcd, uint8_t row, uint8_t col){
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b084      	sub	sp, #16
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	70fb      	strb	r3, [r7, #3]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	70bb      	strb	r3, [r7, #2]
	uint8_t DDRAM_addr = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	73fb      	strb	r3, [r7, #15]

    if (row == 0) {
 8000ada:	78fb      	ldrb	r3, [r7, #3]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d102      	bne.n	8000ae6 <LCD_SET_CURSOR_POS+0x20>
        DDRAM_addr = col;
 8000ae0:	78bb      	ldrb	r3, [r7, #2]
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	e008      	b.n	8000af8 <LCD_SET_CURSOR_POS+0x32>
    } else if (row == 1) {
 8000ae6:	78fb      	ldrb	r3, [r7, #3]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d103      	bne.n	8000af4 <LCD_SET_CURSOR_POS+0x2e>
        DDRAM_addr = (0x40 + col);
 8000aec:	78bb      	ldrb	r3, [r7, #2]
 8000aee:	3340      	adds	r3, #64	@ 0x40
 8000af0:	73fb      	strb	r3, [r7, #15]
 8000af2:	e001      	b.n	8000af8 <LCD_SET_CURSOR_POS+0x32>
    } else {
        DDRAM_addr = col;
 8000af4:	78bb      	ldrb	r3, [r7, #2]
 8000af6:	73fb      	strb	r3, [r7, #15]
    }

    LCD_RUN_CMD(lcd, 0, 0, 0x80 | DDRAM_addr);
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2200      	movs	r2, #0
 8000b02:	2100      	movs	r1, #0
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff ff52 	bl	80009ae <LCD_RUN_CMD>
}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000b18:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <LL_RCC_HSI_Enable+0x1c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a04      	ldr	r2, [pc, #16]	@ (8000b30 <LL_RCC_HSI_Enable+0x1c>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6013      	str	r3, [r2, #0]
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800

08000b34 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <LL_RCC_HSI_IsReady+0x20>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f003 0302 	and.w	r3, r3, #2
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	bf0c      	ite	eq
 8000b44:	2301      	moveq	r3, #1
 8000b46:	2300      	movne	r3, #0
 8000b48:	b2db      	uxtb	r3, r3
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	40023800 	.word	0x40023800

08000b58 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000b60:	4b07      	ldr	r3, [pc, #28]	@ (8000b80 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	4904      	ldr	r1, [pc, #16]	@ (8000b80 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	600b      	str	r3, [r1, #0]
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <LL_RCC_SetSysClkSource+0x24>)
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	f023 0203 	bic.w	r2, r3, #3
 8000b94:	4904      	ldr	r1, [pc, #16]	@ (8000ba8 <LL_RCC_SetSysClkSource+0x24>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	608b      	str	r3, [r1, #8]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	40023800 	.word	0x40023800

08000bac <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000bb0:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <LL_RCC_GetSysClkSource+0x18>)
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	f003 030c 	and.w	r3, r3, #12
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <LL_RCC_SetAHBPrescaler+0x24>)
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000bd8:	4904      	ldr	r1, [pc, #16]	@ (8000bec <LL_RCC_SetAHBPrescaler+0x24>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	608b      	str	r3, [r1, #8]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	40023800 	.word	0x40023800

08000bf0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000c00:	4904      	ldr	r1, [pc, #16]	@ (8000c14 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	608b      	str	r3, [r1, #8]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	40023800 	.word	0x40023800

08000c18 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000c28:	4904      	ldr	r1, [pc, #16]	@ (8000c3c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	608b      	str	r3, [r1, #8]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	40023800 	.word	0x40023800

08000c40 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000c48:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <LL_RCC_SetTIMPrescaler+0x28>)
 8000c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c4e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000c52:	4905      	ldr	r1, [pc, #20]	@ (8000c68 <LL_RCC_SetTIMPrescaler+0x28>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	40023800 	.word	0x40023800

08000c6c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000c70:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <LL_RCC_PLL_Enable+0x1c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a04      	ldr	r2, [pc, #16]	@ (8000c88 <LL_RCC_PLL_Enable+0x1c>)
 8000c76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800

08000c8c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000c90:	4b07      	ldr	r3, [pc, #28]	@ (8000cb0 <LL_RCC_PLL_IsReady+0x24>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000c9c:	bf0c      	ite	eq
 8000c9e:	2301      	moveq	r3, #1
 8000ca0:	2300      	movne	r3, #0
 8000ca2:	b2db      	uxtb	r3, r3
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
 8000cc0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cfc <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000cc8:	4013      	ands	r3, r2
 8000cca:	68f9      	ldr	r1, [r7, #12]
 8000ccc:	68ba      	ldr	r2, [r7, #8]
 8000cce:	4311      	orrs	r1, r2
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	0192      	lsls	r2, r2, #6
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	4908      	ldr	r1, [pc, #32]	@ (8000cf8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000ce4:	4904      	ldr	r1, [pc, #16]	@ (8000cf8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	ffbf8000 	.word	0xffbf8000

08000d00 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d08:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d0c:	4907      	ldr	r1, [pc, #28]	@ (8000d2c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d14:	4b05      	ldr	r3, [pc, #20]	@ (8000d2c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	40023800 	.word	0x40023800

08000d30 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d3c:	4907      	ldr	r1, [pc, #28]	@ (8000d5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	40023800 	.word	0x40023800

08000d60 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b087      	sub	sp, #28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000d6a:	4a17      	ldr	r2, [pc, #92]	@ (8000dc8 <LL_SYSCFG_SetEXTISource+0x68>)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	3302      	adds	r3, #2
 8000d72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	0c1b      	lsrs	r3, r3, #16
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	ea02 0103 	and.w	r1, r2, r3
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	0c1b      	lsrs	r3, r3, #16
 8000d84:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	fa93 f3a3 	rbit	r3, r3
 8000d8c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d101      	bne.n	8000d9c <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000d98:	2320      	movs	r3, #32
 8000d9a:	e003      	b.n	8000da4 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fab3 f383 	clz	r3, r3
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	461a      	mov	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	fa03 f202 	lsl.w	r2, r3, r2
 8000dac:	4806      	ldr	r0, [pc, #24]	@ (8000dc8 <LL_SYSCFG_SetEXTISource+0x68>)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	430a      	orrs	r2, r1
 8000db4:	3302      	adds	r3, #2
 8000db6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000dba:	bf00      	nop
 8000dbc:	371c      	adds	r7, #28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40013800 	.word	0x40013800

08000dcc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <LL_FLASH_SetLatency+0x24>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f023 0207 	bic.w	r2, r3, #7
 8000ddc:	4904      	ldr	r1, [pc, #16]	@ (8000df0 <LL_FLASH_SetLatency+0x24>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	600b      	str	r3, [r1, #0]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	40023c00 	.word	0x40023c00

08000df4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000df8:	4b04      	ldr	r3, [pc, #16]	@ (8000e0c <LL_FLASH_GetLatency+0x18>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 0307 	and.w	r3, r3, #7
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40023c00 	.word	0x40023c00

08000e10 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000e20:	4904      	ldr	r1, [pc, #16]	@ (8000e34 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	600b      	str	r3, [r1, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	40007000 	.word	0x40007000

08000e38 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000e3c:	4b07      	ldr	r3, [pc, #28]	@ (8000e5c <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000e48:	bf0c      	ite	eq
 8000e4a:	2301      	moveq	r3, #1
 8000e4c:	2300      	movne	r3, #0
 8000e4e:	b2db      	uxtb	r3, r3
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40007000 	.word	0x40007000

08000e60 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	60da      	str	r2, [r3, #12]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	615a      	str	r2, [r3, #20]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <LL_GPIO_SetPinMode>:
{
 8000eac:	b480      	push	{r7}
 8000eae:	b08b      	sub	sp, #44	@ 0x2c
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa93 f3a3 	rbit	r3, r3
 8000ec6:	613b      	str	r3, [r7, #16]
  return result;
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d101      	bne.n	8000ed6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000ed2:	2320      	movs	r3, #32
 8000ed4:	e003      	b.n	8000ede <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	fab3 f383 	clz	r3, r3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2103      	movs	r1, #3
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	401a      	ands	r2, r3
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eee:	6a3b      	ldr	r3, [r7, #32]
 8000ef0:	fa93 f3a3 	rbit	r3, r3
 8000ef4:	61fb      	str	r3, [r7, #28]
  return result;
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d101      	bne.n	8000f04 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000f00:	2320      	movs	r3, #32
 8000f02:	e003      	b.n	8000f0c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f06:	fab3 f383 	clz	r3, r3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	fa01 f303 	lsl.w	r3, r1, r3
 8000f14:	431a      	orrs	r2, r3
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	601a      	str	r2, [r3, #0]
}
 8000f1a:	bf00      	nop
 8000f1c:	372c      	adds	r7, #44	@ 0x2c
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <LL_GPIO_SetPinPull>:
{
 8000f26:	b480      	push	{r7}
 8000f28:	b08b      	sub	sp, #44	@ 0x2c
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	68da      	ldr	r2, [r3, #12]
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	fa93 f3a3 	rbit	r3, r3
 8000f40:	613b      	str	r3, [r7, #16]
  return result;
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000f4c:	2320      	movs	r3, #32
 8000f4e:	e003      	b.n	8000f58 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	fab3 f383 	clz	r3, r3
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	2103      	movs	r1, #3
 8000f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	401a      	ands	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f68:	6a3b      	ldr	r3, [r7, #32]
 8000f6a:	fa93 f3a3 	rbit	r3, r3
 8000f6e:	61fb      	str	r3, [r7, #28]
  return result;
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000f7a:	2320      	movs	r3, #32
 8000f7c:	e003      	b.n	8000f86 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f80:	fab3 f383 	clz	r3, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	60da      	str	r2, [r3, #12]
}
 8000f94:	bf00      	nop
 8000f96:	372c      	adds	r7, #44	@ 0x2c
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <LL_GPIO_ResetOutputPin>:
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	041a      	lsls	r2, r3, #16
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	619a      	str	r2, [r3, #24]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b09a      	sub	sp, #104	@ 0x68
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	DHT11_Data DHT_DAT;

	LCD my_LCD = {
 8000fc6:	4a3a      	ldr	r2, [pc, #232]	@ (80010b0 <main+0xf0>)
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4611      	mov	r1, r2
 8000fce:	2250      	movs	r2, #80	@ 0x50
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 fe81 	bl	8002cd8 <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd6:	f000 faf1 	bl	80015bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fda:	f000 f889 	bl	80010f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fde:	f000 f979 	bl	80012d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fe2:	f000 f927 	bl	8001234 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000fe6:	f000 f8d9 	bl	800119c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  TIM2->CR1 |= TIM_CR1_CEN;
 8000fea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6013      	str	r3, [r2, #0]

  LCD_INIT(&my_LCD); // initializes as 2 line, 8 bit, right incrementing
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fcf8 	bl	80009f4 <LCD_INIT>
  LCD_PRINT(&my_LCD, "Really long string hello");
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	492a      	ldr	r1, [pc, #168]	@ (80010b4 <main+0xf4>)
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fd29 	bl	8000a62 <LCD_PRINT>
  LCD_CLEAR(&my_LCD);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fd13 	bl	8000a40 <LCD_CLEAR>
   * 8. next bit starts to transmit (50us)
   * 9. repeats until finished, then voltage pulls up and ready to read
   */

  // GPIO set as output, already pulled high
  GPIOB->MODER &= ~GPIO_MODER_MODER9_Msk; // reset
 800101a:	4b27      	ldr	r3, [pc, #156]	@ (80010b8 <main+0xf8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a26      	ldr	r2, [pc, #152]	@ (80010b8 <main+0xf8>)
 8001020:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8001024:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= (1U << GPIO_MODER_MODE9_Pos);  // shift 1 to the 18th bit
 8001026:	4b24      	ldr	r3, [pc, #144]	@ (80010b8 <main+0xf8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a23      	ldr	r2, [pc, #140]	@ (80010b8 <main+0xf8>)
 800102c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001030:	6013      	str	r3, [r2, #0]

  // GPIO pulls low, now wait 18ms
  GPIOB->ODR &= ~GPIO_ODR_OD9_Msk;
 8001032:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <main+0xf8>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	4a20      	ldr	r2, [pc, #128]	@ (80010b8 <main+0xf8>)
 8001038:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800103c:	6153      	str	r3, [r2, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DHT_DAT = DHT11_READ();
 800103e:	f7ff fb9b 	bl	8000778 <DHT11_READ>
 8001042:	4603      	mov	r3, r0
 8001044:	667b      	str	r3, [r7, #100]	@ 0x64

	  char buffer[16];

	  LCD_SET_CURSOR_POS(&my_LCD, 0, 0);
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fd39 	bl	8000ac6 <LCD_SET_CURSOR_POS>
	  sprintf(buffer, "Temp: %2d.%dF", DHT_DAT.temp_int, DHT_DAT.temp_dec);
 8001054:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001058:	461a      	mov	r2, r3
 800105a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800105e:	1d38      	adds	r0, r7, #4
 8001060:	4916      	ldr	r1, [pc, #88]	@ (80010bc <main+0xfc>)
 8001062:	f001 fdeb 	bl	8002c3c <siprintf>
	  LCD_PRINT(&my_LCD, buffer);
 8001066:	1d3a      	adds	r2, r7, #4
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fcf7 	bl	8000a62 <LCD_PRINT>

	  LCD_SET_CURSOR_POS(&my_LCD, 1, 0);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	2101      	movs	r1, #1
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fd22 	bl	8000ac6 <LCD_SET_CURSOR_POS>
	  sprintf(buffer, "Humidity: %2d.%d%%", DHT_DAT.humidity_int, DHT_DAT.humidity_dec);
 8001082:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001086:	461a      	mov	r2, r3
 8001088:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 800108c:	1d38      	adds	r0, r7, #4
 800108e:	490c      	ldr	r1, [pc, #48]	@ (80010c0 <main+0x100>)
 8001090:	f001 fdd4 	bl	8002c3c <siprintf>
	  LCD_PRINT(&my_LCD, buffer);
 8001094:	1d3a      	adds	r2, r7, #4
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fce0 	bl	8000a62 <LCD_PRINT>

	  HAL_Delay(500);
 80010a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010a6:	f000 fafb 	bl	80016a0 <HAL_Delay>
  {
 80010aa:	bf00      	nop
 80010ac:	e7c7      	b.n	800103e <main+0x7e>
 80010ae:	bf00      	nop
 80010b0:	080035c4 	.word	0x080035c4
 80010b4:	08003584 	.word	0x08003584
 80010b8:	40020400 	.word	0x40020400
 80010bc:	080035a0 	.word	0x080035a0
 80010c0:	080035b0 	.word	0x080035b0

080010c4 <delay_us>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void delay_us(uint32_t us){
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	TIM2->CNT = 0;
 80010cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010d0:	2200      	movs	r2, #0
 80010d2:	625a      	str	r2, [r3, #36]	@ 0x24
	while (TIM2->CNT < us);
 80010d4:	bf00      	nop
 80010d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d8f9      	bhi.n	80010d6 <delay_us+0x12>
}
 80010e2:	bf00      	nop
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80010f4:	2002      	movs	r0, #2
 80010f6:	f7ff fe69 	bl	8000dcc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80010fa:	bf00      	nop
 80010fc:	f7ff fe7a 	bl	8000df4 <LL_FLASH_GetLatency>
 8001100:	4603      	mov	r3, r0
 8001102:	2b02      	cmp	r3, #2
 8001104:	d1fa      	bne.n	80010fc <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8001106:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800110a:	f7ff fe81 	bl	8000e10 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 800110e:	2010      	movs	r0, #16
 8001110:	f7ff fd22 	bl	8000b58 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001114:	f7ff fcfe 	bl	8000b14 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001118:	bf00      	nop
 800111a:	f7ff fd0b 	bl	8000b34 <LL_RCC_HSI_IsReady>
 800111e:	4603      	mov	r3, r0
 8001120:	2b01      	cmp	r3, #1
 8001122:	d1fa      	bne.n	800111a <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 8001124:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001128:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 800112c:	2110      	movs	r1, #16
 800112e:	2000      	movs	r0, #0
 8001130:	f7ff fdc0 	bl	8000cb4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001134:	f7ff fd9a 	bl	8000c6c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001138:	bf00      	nop
 800113a:	f7ff fda7 	bl	8000c8c <LL_RCC_PLL_IsReady>
 800113e:	4603      	mov	r3, r0
 8001140:	2b01      	cmp	r3, #1
 8001142:	d1fa      	bne.n	800113a <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8001144:	bf00      	nop
 8001146:	f7ff fe77 	bl	8000e38 <LL_PWR_IsActiveFlag_VOS>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0fa      	beq.n	8001146 <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001150:	2000      	movs	r0, #0
 8001152:	f7ff fd39 	bl	8000bc8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001156:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800115a:	f7ff fd49 	bl	8000bf0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800115e:	2000      	movs	r0, #0
 8001160:	f7ff fd5a 	bl	8000c18 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001164:	2002      	movs	r0, #2
 8001166:	f7ff fd0d 	bl	8000b84 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800116a:	bf00      	nop
 800116c:	f7ff fd1e 	bl	8000bac <LL_RCC_GetSysClkSource>
 8001170:	4603      	mov	r3, r0
 8001172:	2b08      	cmp	r3, #8
 8001174:	d1fa      	bne.n	800116c <SystemClock_Config+0x7c>
  {

  }
  LL_SetSystemCoreClock(84000000);
 8001176:	4808      	ldr	r0, [pc, #32]	@ (8001198 <SystemClock_Config+0xa8>)
 8001178:	f001 fd50 	bl	8002c1c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800117c:	2000      	movs	r0, #0
 800117e:	f000 fa3f 	bl	8001600 <HAL_InitTick>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001188:	f000 f928 	bl	80013dc <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff fd57 	bl	8000c40 <LL_RCC_SetTIMPrescaler>
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	0501bd00 	.word	0x0501bd00

0800119c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	463b      	mov	r3, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001230 <MX_TIM2_Init+0x94>)
 80011ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001230 <MX_TIM2_Init+0x94>)
 80011c2:	2253      	movs	r2, #83	@ 0x53
 80011c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <MX_TIM2_Init+0x94>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011cc:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <MX_TIM2_Init+0x94>)
 80011ce:	f04f 32ff 	mov.w	r2, #4294967295
 80011d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d4:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <MX_TIM2_Init+0x94>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011da:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <MX_TIM2_Init+0x94>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011e0:	4813      	ldr	r0, [pc, #76]	@ (8001230 <MX_TIM2_Init+0x94>)
 80011e2:	f000 fb66 	bl	80018b2 <HAL_TIM_Base_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011ec:	f000 f8f6 	bl	80013dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	4619      	mov	r1, r3
 80011fc:	480c      	ldr	r0, [pc, #48]	@ (8001230 <MX_TIM2_Init+0x94>)
 80011fe:	f000 fba7 	bl	8001950 <HAL_TIM_ConfigClockSource>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001208:	f000 f8e8 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	@ (8001230 <MX_TIM2_Init+0x94>)
 800121a:	f000 fd81 	bl	8001d20 <HAL_TIMEx_MasterConfigSynchronization>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001224:	f000 f8da 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000078 	.word	0x20000078

08001234 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08e      	sub	sp, #56	@ 0x38
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	611a      	str	r2, [r3, #16]
 800124a:	615a      	str	r2, [r3, #20]
 800124c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800125e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001262:	f7ff fd65 	bl	8000d30 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001266:	2001      	movs	r0, #1
 8001268:	f7ff fd4a 	bl	8000d00 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800126c:	230c      	movs	r3, #12
 800126e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001270:	2302      	movs	r3, #2
 8001272:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001280:	2307      	movs	r3, #7
 8001282:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	4619      	mov	r1, r3
 8001288:	4810      	ldr	r0, [pc, #64]	@ (80012cc <MX_USART2_UART_Init+0x98>)
 800128a:	f001 f819 	bl	80022c0 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800128e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001292:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800129c:	2300      	movs	r3, #0
 800129e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80012a0:	230c      	movs	r3, #12
 80012a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80012a8:	2300      	movs	r3, #0
 80012aa:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	4807      	ldr	r0, [pc, #28]	@ (80012d0 <MX_USART2_UART_Init+0x9c>)
 80012b4:	f001 fc28 	bl	8002b08 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80012b8:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_USART2_UART_Init+0x9c>)
 80012ba:	f7ff fde1 	bl	8000e80 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80012be:	4804      	ldr	r0, [pc, #16]	@ (80012d0 <MX_USART2_UART_Init+0x9c>)
 80012c0:	f7ff fdce 	bl	8000e60 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	3738      	adds	r7, #56	@ 0x38
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40004400 	.word	0x40004400

080012d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80012da:	f107 0318 	add.w	r3, r7, #24
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	463b      	mov	r3, r7
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]
 80012f2:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80012f4:	2004      	movs	r0, #4
 80012f6:	f7ff fd03 	bl	8000d00 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80012fa:	2080      	movs	r0, #128	@ 0x80
 80012fc:	f7ff fd00 	bl	8000d00 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001300:	2001      	movs	r0, #1
 8001302:	f7ff fcfd 	bl	8000d00 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001306:	2002      	movs	r0, #2
 8001308:	f7ff fcfa 	bl	8000d00 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LD2_Pin|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8
 800130c:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8001310:	482e      	ldr	r0, [pc, #184]	@ (80013cc <MX_GPIO_Init+0xf8>)
 8001312:	f7ff fe45 	bl	8000fa0 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9|LL_GPIO_PIN_10);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
 8001316:	f44f 61ce 	mov.w	r1, #1648	@ 0x670
 800131a:	482d      	ldr	r0, [pc, #180]	@ (80013d0 <MX_GPIO_Init+0xfc>)
 800131c:	f7ff fe40 	bl	8000fa0 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 8001320:	2180      	movs	r1, #128	@ 0x80
 8001322:	482c      	ldr	r0, [pc, #176]	@ (80013d4 <MX_GPIO_Init+0x100>)
 8001324:	f7ff fe3c 	bl	8000fa0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8001328:	492b      	ldr	r1, [pc, #172]	@ (80013d8 <MX_GPIO_Init+0x104>)
 800132a:	2002      	movs	r0, #2
 800132c:	f7ff fd18 	bl	8000d60 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001330:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001334:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001336:	2301      	movs	r3, #1
 8001338:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800133a:	2300      	movs	r3, #0
 800133c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800133e:	2302      	movs	r3, #2
 8001340:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001342:	f107 0318 	add.w	r3, r7, #24
 8001346:	4618      	mov	r0, r3
 8001348:	f000 fdf0 	bl	8001f2c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001352:	4820      	ldr	r0, [pc, #128]	@ (80013d4 <MX_GPIO_Init+0x100>)
 8001354:	f7ff fde7 	bl	8000f26 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800135e:	481d      	ldr	r0, [pc, #116]	@ (80013d4 <MX_GPIO_Init+0x100>)
 8001360:	f7ff fda4 	bl	8000eac <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8
 8001364:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001368:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_9|LL_GPIO_PIN_10;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800136a:	2301      	movs	r3, #1
 800136c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	463b      	mov	r3, r7
 800137c:	4619      	mov	r1, r3
 800137e:	4813      	ldr	r0, [pc, #76]	@ (80013cc <MX_GPIO_Init+0xf8>)
 8001380:	f000 ff9e 	bl	80022c0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
 8001384:	f44f 63ce 	mov.w	r3, #1648	@ 0x670
 8001388:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800138a:	2301      	movs	r3, #1
 800138c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139a:	463b      	mov	r3, r7
 800139c:	4619      	mov	r1, r3
 800139e:	480c      	ldr	r0, [pc, #48]	@ (80013d0 <MX_GPIO_Init+0xfc>)
 80013a0:	f000 ff8e 	bl	80022c0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80013a4:	2380      	movs	r3, #128	@ 0x80
 80013a6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013a8:	2301      	movs	r3, #1
 80013aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013b4:	2300      	movs	r3, #0
 80013b6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b8:	463b      	mov	r3, r7
 80013ba:	4619      	mov	r1, r3
 80013bc:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <MX_GPIO_Init+0x100>)
 80013be:	f000 ff7f 	bl	80022c0 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013c2:	bf00      	nop
 80013c4:	3720      	adds	r7, #32
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40020000 	.word	0x40020000
 80013d0:	40020400 	.word	0x40020400
 80013d4:	40020800 	.word	0x40020800
 80013d8:	00f00003 	.word	0x00f00003

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <Error_Handler+0x8>

080013e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <HAL_MspInit+0x4c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001434 <HAL_MspInit+0x4c>)
 80013f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001434 <HAL_MspInit+0x4c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <HAL_MspInit+0x4c>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001412:	4a08      	ldr	r2, [pc, #32]	@ (8001434 <HAL_MspInit+0x4c>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	@ 0x40
 800141a:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <HAL_MspInit+0x4c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800

08001438 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001448:	d10d      	bne.n	8001466 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <HAL_TIM_Base_MspInit+0x3c>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001452:	4a08      	ldr	r2, [pc, #32]	@ (8001474 <HAL_TIM_Base_MspInit+0x3c>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6413      	str	r3, [r2, #64]	@ 0x40
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_TIM_Base_MspInit+0x3c>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <NMI_Handler+0x4>

08001480 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <HardFault_Handler+0x4>

08001488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <MemManage_Handler+0x4>

08001490 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <UsageFault_Handler+0x4>

080014a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ce:	f000 f8c7 	bl	8001660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e0:	4a14      	ldr	r2, [pc, #80]	@ (8001534 <_sbrk+0x5c>)
 80014e2:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <_sbrk+0x60>)
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ec:	4b13      	ldr	r3, [pc, #76]	@ (800153c <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f4:	4b11      	ldr	r3, [pc, #68]	@ (800153c <_sbrk+0x64>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	@ (8001540 <_sbrk+0x68>)
 80014f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	429a      	cmp	r2, r3
 8001506:	d207      	bcs.n	8001518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001508:	f001 fbba 	bl	8002c80 <__errno>
 800150c:	4603      	mov	r3, r0
 800150e:	220c      	movs	r2, #12
 8001510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
 8001516:	e009      	b.n	800152c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001518:	4b08      	ldr	r3, [pc, #32]	@ (800153c <_sbrk+0x64>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151e:	4b07      	ldr	r3, [pc, #28]	@ (800153c <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	4a05      	ldr	r2, [pc, #20]	@ (800153c <_sbrk+0x64>)
 8001528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20018000 	.word	0x20018000
 8001538:	00000400 	.word	0x00000400
 800153c:	200000c0 	.word	0x200000c0
 8001540:	20000210 	.word	0x20000210

08001544 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <SystemInit+0x20>)
 800154a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800154e:	4a05      	ldr	r2, [pc, #20]	@ (8001564 <SystemInit+0x20>)
 8001550:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001554:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001568:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800156c:	f7ff ffea 	bl	8001544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001570:	480c      	ldr	r0, [pc, #48]	@ (80015a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001572:	490d      	ldr	r1, [pc, #52]	@ (80015a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001574:	4a0d      	ldr	r2, [pc, #52]	@ (80015ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001578:	e002      	b.n	8001580 <LoopCopyDataInit>

0800157a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800157c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157e:	3304      	adds	r3, #4

08001580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001584:	d3f9      	bcc.n	800157a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001586:	4a0a      	ldr	r2, [pc, #40]	@ (80015b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001588:	4c0a      	ldr	r4, [pc, #40]	@ (80015b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800158c:	e001      	b.n	8001592 <LoopFillZerobss>

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001590:	3204      	adds	r2, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001596:	f001 fb79 	bl	8002c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800159a:	f7ff fd11 	bl	8000fc0 <main>
  bx  lr    
 800159e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80015ac:	08003670 	.word	0x08003670
  ldr r2, =_sbss
 80015b0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80015b4:	20000210 	.word	0x20000210

080015b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC_IRQHandler>
	...

080015bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015c0:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0d      	ldr	r2, [pc, #52]	@ (80015fc <HAL_Init+0x40>)
 80015c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015cc:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <HAL_Init+0x40>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a0a      	ldr	r2, [pc, #40]	@ (80015fc <HAL_Init+0x40>)
 80015d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d8:	4b08      	ldr	r3, [pc, #32]	@ (80015fc <HAL_Init+0x40>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a07      	ldr	r2, [pc, #28]	@ (80015fc <HAL_Init+0x40>)
 80015de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f000 f931 	bl	800184c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ea:	2000      	movs	r0, #0
 80015ec:	f000 f808 	bl	8001600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f0:	f7ff fefa 	bl	80013e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023c00 	.word	0x40023c00

08001600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001608:	4b12      	ldr	r3, [pc, #72]	@ (8001654 <HAL_InitTick+0x54>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <HAL_InitTick+0x58>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001616:	fbb3 f3f1 	udiv	r3, r3, r1
 800161a:	fbb2 f3f3 	udiv	r3, r2, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f93b 	bl	800189a <HAL_SYSTICK_Config>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e00e      	b.n	800164c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	d80a      	bhi.n	800164a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001634:	2200      	movs	r2, #0
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f000 f911 	bl	8001862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001640:	4a06      	ldr	r2, [pc, #24]	@ (800165c <HAL_InitTick+0x5c>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	e000      	b.n	800164c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000000 	.word	0x20000000
 8001658:	20000008 	.word	0x20000008
 800165c:	20000004 	.word	0x20000004

08001660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <HAL_IncTick+0x20>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <HAL_IncTick+0x24>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	4a04      	ldr	r2, [pc, #16]	@ (8001684 <HAL_IncTick+0x24>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000008 	.word	0x20000008
 8001684:	200000c4 	.word	0x200000c4

08001688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return uwTick;
 800168c:	4b03      	ldr	r3, [pc, #12]	@ (800169c <HAL_GetTick+0x14>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	200000c4 	.word	0x200000c4

080016a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a8:	f7ff ffee 	bl	8001688 <HAL_GetTick>
 80016ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b8:	d005      	beq.n	80016c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ba:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <HAL_Delay+0x44>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4413      	add	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016c6:	bf00      	nop
 80016c8:	f7ff ffde 	bl	8001688 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d8f7      	bhi.n	80016c8 <HAL_Delay+0x28>
  {
  }
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000008 	.word	0x20000008

080016e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f8:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <__NVIC_SetPriorityGrouping+0x44>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001704:	4013      	ands	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001710:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171a:	4a04      	ldr	r2, [pc, #16]	@ (800172c <__NVIC_SetPriorityGrouping+0x44>)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	60d3      	str	r3, [r2, #12]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001734:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <__NVIC_GetPriorityGrouping+0x18>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	f003 0307 	and.w	r3, r3, #7
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db0a      	blt.n	8001776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	490c      	ldr	r1, [pc, #48]	@ (8001798 <__NVIC_SetPriority+0x4c>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	440b      	add	r3, r1
 8001770:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001774:	e00a      	b.n	800178c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4908      	ldr	r1, [pc, #32]	@ (800179c <__NVIC_SetPriority+0x50>)
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3b04      	subs	r3, #4
 8001784:	0112      	lsls	r2, r2, #4
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	440b      	add	r3, r1
 800178a:	761a      	strb	r2, [r3, #24]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	@ 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f1c3 0307 	rsb	r3, r3, #7
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	bf28      	it	cs
 80017be:	2304      	movcs	r3, #4
 80017c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3304      	adds	r3, #4
 80017c6:	2b06      	cmp	r3, #6
 80017c8:	d902      	bls.n	80017d0 <NVIC_EncodePriority+0x30>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3b03      	subs	r3, #3
 80017ce:	e000      	b.n	80017d2 <NVIC_EncodePriority+0x32>
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	401a      	ands	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	4313      	orrs	r3, r2
         );
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	@ 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001818:	d301      	bcc.n	800181e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181a:	2301      	movs	r3, #1
 800181c:	e00f      	b.n	800183e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181e:	4a0a      	ldr	r2, [pc, #40]	@ (8001848 <SysTick_Config+0x40>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001826:	210f      	movs	r1, #15
 8001828:	f04f 30ff 	mov.w	r0, #4294967295
 800182c:	f7ff ff8e 	bl	800174c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001830:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <SysTick_Config+0x40>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001836:	4b04      	ldr	r3, [pc, #16]	@ (8001848 <SysTick_Config+0x40>)
 8001838:	2207      	movs	r2, #7
 800183a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	e000e010 	.word	0xe000e010

0800184c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ff47 	bl	80016e8 <__NVIC_SetPriorityGrouping>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001874:	f7ff ff5c 	bl	8001730 <__NVIC_GetPriorityGrouping>
 8001878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	6978      	ldr	r0, [r7, #20]
 8001880:	f7ff ff8e 	bl	80017a0 <NVIC_EncodePriority>
 8001884:	4602      	mov	r2, r0
 8001886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff5d 	bl	800174c <__NVIC_SetPriority>
}
 8001892:	bf00      	nop
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ffb0 	bl	8001808 <SysTick_Config>
 80018a8:	4603      	mov	r3, r0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e041      	b.n	8001948 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d106      	bne.n	80018de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff fdad 	bl	8001438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2202      	movs	r2, #2
 80018e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3304      	adds	r3, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4610      	mov	r0, r2
 80018f2:	f000 f8f5 	bl	8001ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_TIM_ConfigClockSource+0x1c>
 8001968:	2302      	movs	r3, #2
 800196a:	e0b4      	b.n	8001ad6 <HAL_TIM_ConfigClockSource+0x186>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2202      	movs	r2, #2
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800198a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001992:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019a4:	d03e      	beq.n	8001a24 <HAL_TIM_ConfigClockSource+0xd4>
 80019a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019aa:	f200 8087 	bhi.w	8001abc <HAL_TIM_ConfigClockSource+0x16c>
 80019ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019b2:	f000 8086 	beq.w	8001ac2 <HAL_TIM_ConfigClockSource+0x172>
 80019b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019ba:	d87f      	bhi.n	8001abc <HAL_TIM_ConfigClockSource+0x16c>
 80019bc:	2b70      	cmp	r3, #112	@ 0x70
 80019be:	d01a      	beq.n	80019f6 <HAL_TIM_ConfigClockSource+0xa6>
 80019c0:	2b70      	cmp	r3, #112	@ 0x70
 80019c2:	d87b      	bhi.n	8001abc <HAL_TIM_ConfigClockSource+0x16c>
 80019c4:	2b60      	cmp	r3, #96	@ 0x60
 80019c6:	d050      	beq.n	8001a6a <HAL_TIM_ConfigClockSource+0x11a>
 80019c8:	2b60      	cmp	r3, #96	@ 0x60
 80019ca:	d877      	bhi.n	8001abc <HAL_TIM_ConfigClockSource+0x16c>
 80019cc:	2b50      	cmp	r3, #80	@ 0x50
 80019ce:	d03c      	beq.n	8001a4a <HAL_TIM_ConfigClockSource+0xfa>
 80019d0:	2b50      	cmp	r3, #80	@ 0x50
 80019d2:	d873      	bhi.n	8001abc <HAL_TIM_ConfigClockSource+0x16c>
 80019d4:	2b40      	cmp	r3, #64	@ 0x40
 80019d6:	d058      	beq.n	8001a8a <HAL_TIM_ConfigClockSource+0x13a>
 80019d8:	2b40      	cmp	r3, #64	@ 0x40
 80019da:	d86f      	bhi.n	8001abc <HAL_TIM_ConfigClockSource+0x16c>
 80019dc:	2b30      	cmp	r3, #48	@ 0x30
 80019de:	d064      	beq.n	8001aaa <HAL_TIM_ConfigClockSource+0x15a>
 80019e0:	2b30      	cmp	r3, #48	@ 0x30
 80019e2:	d86b      	bhi.n	8001abc <HAL_TIM_ConfigClockSource+0x16c>
 80019e4:	2b20      	cmp	r3, #32
 80019e6:	d060      	beq.n	8001aaa <HAL_TIM_ConfigClockSource+0x15a>
 80019e8:	2b20      	cmp	r3, #32
 80019ea:	d867      	bhi.n	8001abc <HAL_TIM_ConfigClockSource+0x16c>
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d05c      	beq.n	8001aaa <HAL_TIM_ConfigClockSource+0x15a>
 80019f0:	2b10      	cmp	r3, #16
 80019f2:	d05a      	beq.n	8001aaa <HAL_TIM_ConfigClockSource+0x15a>
 80019f4:	e062      	b.n	8001abc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a06:	f000 f96b 	bl	8001ce0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001a18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	609a      	str	r2, [r3, #8]
      break;
 8001a22:	e04f      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a34:	f000 f954 	bl	8001ce0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a46:	609a      	str	r2, [r3, #8]
      break;
 8001a48:	e03c      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a56:	461a      	mov	r2, r3
 8001a58:	f000 f8c8 	bl	8001bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2150      	movs	r1, #80	@ 0x50
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f921 	bl	8001caa <TIM_ITRx_SetConfig>
      break;
 8001a68:	e02c      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a76:	461a      	mov	r2, r3
 8001a78:	f000 f8e7 	bl	8001c4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2160      	movs	r1, #96	@ 0x60
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f911 	bl	8001caa <TIM_ITRx_SetConfig>
      break;
 8001a88:	e01c      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a96:	461a      	mov	r2, r3
 8001a98:	f000 f8a8 	bl	8001bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2140      	movs	r1, #64	@ 0x40
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f901 	bl	8001caa <TIM_ITRx_SetConfig>
      break;
 8001aa8:	e00c      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	f000 f8f8 	bl	8001caa <TIM_ITRx_SetConfig>
      break;
 8001aba:	e003      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	73fb      	strb	r3, [r7, #15]
      break;
 8001ac0:	e000      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001ac2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a37      	ldr	r2, [pc, #220]	@ (8001bd0 <TIM_Base_SetConfig+0xf0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d00f      	beq.n	8001b18 <TIM_Base_SetConfig+0x38>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001afe:	d00b      	beq.n	8001b18 <TIM_Base_SetConfig+0x38>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a34      	ldr	r2, [pc, #208]	@ (8001bd4 <TIM_Base_SetConfig+0xf4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d007      	beq.n	8001b18 <TIM_Base_SetConfig+0x38>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a33      	ldr	r2, [pc, #204]	@ (8001bd8 <TIM_Base_SetConfig+0xf8>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d003      	beq.n	8001b18 <TIM_Base_SetConfig+0x38>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a32      	ldr	r2, [pc, #200]	@ (8001bdc <TIM_Base_SetConfig+0xfc>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d108      	bne.n	8001b2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a28      	ldr	r2, [pc, #160]	@ (8001bd0 <TIM_Base_SetConfig+0xf0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d01b      	beq.n	8001b6a <TIM_Base_SetConfig+0x8a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b38:	d017      	beq.n	8001b6a <TIM_Base_SetConfig+0x8a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a25      	ldr	r2, [pc, #148]	@ (8001bd4 <TIM_Base_SetConfig+0xf4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d013      	beq.n	8001b6a <TIM_Base_SetConfig+0x8a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a24      	ldr	r2, [pc, #144]	@ (8001bd8 <TIM_Base_SetConfig+0xf8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d00f      	beq.n	8001b6a <TIM_Base_SetConfig+0x8a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a23      	ldr	r2, [pc, #140]	@ (8001bdc <TIM_Base_SetConfig+0xfc>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d00b      	beq.n	8001b6a <TIM_Base_SetConfig+0x8a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a22      	ldr	r2, [pc, #136]	@ (8001be0 <TIM_Base_SetConfig+0x100>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d007      	beq.n	8001b6a <TIM_Base_SetConfig+0x8a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a21      	ldr	r2, [pc, #132]	@ (8001be4 <TIM_Base_SetConfig+0x104>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d003      	beq.n	8001b6a <TIM_Base_SetConfig+0x8a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a20      	ldr	r2, [pc, #128]	@ (8001be8 <TIM_Base_SetConfig+0x108>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d108      	bne.n	8001b7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd0 <TIM_Base_SetConfig+0xf0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d103      	bne.n	8001baa <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	691a      	ldr	r2, [r3, #16]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f043 0204 	orr.w	r2, r3, #4
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	601a      	str	r2, [r3, #0]
}
 8001bc2:	bf00      	nop
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	40000400 	.word	0x40000400
 8001bd8:	40000800 	.word	0x40000800
 8001bdc:	40000c00 	.word	0x40000c00
 8001be0:	40014000 	.word	0x40014000
 8001be4:	40014400 	.word	0x40014400
 8001be8:	40014800 	.word	0x40014800

08001bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	f023 0201 	bic.w	r2, r3, #1
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f023 030a 	bic.w	r3, r3, #10
 8001c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	621a      	str	r2, [r3, #32]
}
 8001c3e:	bf00      	nop
 8001c40:	371c      	adds	r7, #28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b087      	sub	sp, #28
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	f023 0210 	bic.w	r2, r3, #16
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001c74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	031b      	lsls	r3, r3, #12
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001c86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	621a      	str	r2, [r3, #32]
}
 8001c9e:	bf00      	nop
 8001ca0:	371c      	adds	r7, #28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b085      	sub	sp, #20
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	f043 0307 	orr.w	r3, r3, #7
 8001ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	609a      	str	r2, [r3, #8]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001cfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	021a      	lsls	r2, r3, #8
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	431a      	orrs	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	609a      	str	r2, [r3, #8]
}
 8001d14:	bf00      	nop
 8001d16:	371c      	adds	r7, #28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e050      	b.n	8001dda <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1c      	ldr	r2, [pc, #112]	@ (8001de8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d018      	beq.n	8001dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d84:	d013      	beq.n	8001dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a18      	ldr	r2, [pc, #96]	@ (8001dec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d00e      	beq.n	8001dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a16      	ldr	r2, [pc, #88]	@ (8001df0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d009      	beq.n	8001dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a15      	ldr	r2, [pc, #84]	@ (8001df4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d004      	beq.n	8001dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a13      	ldr	r2, [pc, #76]	@ (8001df8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d10c      	bne.n	8001dc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001db4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40010000 	.word	0x40010000
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40000800 	.word	0x40000800
 8001df4:	40000c00 	.word	0x40000c00
 8001df8:	40014000 	.word	0x40014000

08001dfc <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001e04:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <LL_EXTI_EnableIT_0_31+0x20>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4904      	ldr	r1, [pc, #16]	@ (8001e1c <LL_EXTI_EnableIT_0_31+0x20>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	40013c00 	.word	0x40013c00

08001e20 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001e28:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <LL_EXTI_DisableIT_0_31+0x24>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	4904      	ldr	r1, [pc, #16]	@ (8001e44 <LL_EXTI_DisableIT_0_31+0x24>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40013c00 	.word	0x40013c00

08001e48 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001e50:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	4904      	ldr	r1, [pc, #16]	@ (8001e68 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]

}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	40013c00 	.word	0x40013c00

08001e6c <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001e74:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	4904      	ldr	r1, [pc, #16]	@ (8001e90 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40013c00 	.word	0x40013c00

08001e94 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001e9c:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	4904      	ldr	r1, [pc, #16]	@ (8001eb4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	608b      	str	r3, [r1, #8]

}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	40013c00 	.word	0x40013c00

08001eb8 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	4904      	ldr	r1, [pc, #16]	@ (8001edc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	608b      	str	r3, [r1, #8]

}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40013c00 	.word	0x40013c00

08001ee0 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001ee8:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	4904      	ldr	r1, [pc, #16]	@ (8001f00 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	60cb      	str	r3, [r1, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	40013c00 	.word	0x40013c00

08001f04 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001f0c:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	4904      	ldr	r1, [pc, #16]	@ (8001f28 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	60cb      	str	r3, [r1, #12]
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40013c00 	.word	0x40013c00

08001f2c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001f34:	2300      	movs	r3, #0
 8001f36:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	791b      	ldrb	r3, [r3, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d065      	beq.n	800200c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d06b      	beq.n	8002020 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	795b      	ldrb	r3, [r3, #5]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d01c      	beq.n	8001f8a <LL_EXTI_Init+0x5e>
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	dc25      	bgt.n	8001fa0 <LL_EXTI_Init+0x74>
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <LL_EXTI_Init+0x32>
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d00b      	beq.n	8001f74 <LL_EXTI_Init+0x48>
 8001f5c:	e020      	b.n	8001fa0 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ff82 	bl	8001e6c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff45 	bl	8001dfc <LL_EXTI_EnableIT_0_31>
          break;
 8001f72:	e018      	b.n	8001fa6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff51 	bl	8001e20 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff60 	bl	8001e48 <LL_EXTI_EnableEvent_0_31>
          break;
 8001f88:	e00d      	b.n	8001fa6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff34 	bl	8001dfc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff55 	bl	8001e48 <LL_EXTI_EnableEvent_0_31>
          break;
 8001f9e:	e002      	b.n	8001fa6 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
          break;
 8001fa4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	799b      	ldrb	r3, [r3, #6]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d038      	beq.n	8002020 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	799b      	ldrb	r3, [r3, #6]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d01c      	beq.n	8001ff0 <LL_EXTI_Init+0xc4>
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	dc25      	bgt.n	8002006 <LL_EXTI_Init+0xda>
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d002      	beq.n	8001fc4 <LL_EXTI_Init+0x98>
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d00b      	beq.n	8001fda <LL_EXTI_Init+0xae>
 8001fc2:	e020      	b.n	8002006 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff9b 	bl	8001f04 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ff5e 	bl	8001e94 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001fd8:	e022      	b.n	8002020 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ff6a 	bl	8001eb8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff79 	bl	8001ee0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001fee:	e017      	b.n	8002020 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff4d 	bl	8001e94 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff ff6e 	bl	8001ee0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002004:	e00c      	b.n	8002020 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	73fb      	strb	r3, [r7, #15]
            break;
 800200a:	e009      	b.n	8002020 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff05 	bl	8001e20 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff ff26 	bl	8001e6c <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8002020:	7bfb      	ldrb	r3, [r7, #15]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <LL_GPIO_SetPinMode>:
{
 800202a:	b480      	push	{r7}
 800202c:	b08b      	sub	sp, #44	@ 0x2c
 800202e:	af00      	add	r7, sp, #0
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	613b      	str	r3, [r7, #16]
  return result;
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002050:	2320      	movs	r3, #32
 8002052:	e003      	b.n	800205c <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	2103      	movs	r1, #3
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	401a      	ands	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	61fb      	str	r3, [r7, #28]
  return result;
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800207e:	2320      	movs	r3, #32
 8002080:	e003      	b.n	800208a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002084:	fab3 f383 	clz	r3, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	fa01 f303 	lsl.w	r3, r1, r3
 8002092:	431a      	orrs	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	601a      	str	r2, [r3, #0]
}
 8002098:	bf00      	nop
 800209a:	372c      	adds	r7, #44	@ 0x2c
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_GPIO_SetPinOutputType>:
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	401a      	ands	r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	fb01 f303 	mul.w	r3, r1, r3
 80020c2:	431a      	orrs	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	605a      	str	r2, [r3, #4]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_GPIO_SetPinSpeed>:
{
 80020d4:	b480      	push	{r7}
 80020d6:	b08b      	sub	sp, #44	@ 0x2c
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	613b      	str	r3, [r7, #16]
  return result;
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80020fa:	2320      	movs	r3, #32
 80020fc:	e003      	b.n	8002106 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	2103      	movs	r1, #3
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	401a      	ands	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	61fb      	str	r3, [r7, #28]
  return result;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002128:	2320      	movs	r3, #32
 800212a:	e003      	b.n	8002134 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800212c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	fa01 f303 	lsl.w	r3, r1, r3
 800213c:	431a      	orrs	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	609a      	str	r2, [r3, #8]
}
 8002142:	bf00      	nop
 8002144:	372c      	adds	r7, #44	@ 0x2c
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <LL_GPIO_SetPinPull>:
{
 800214e:	b480      	push	{r7}
 8002150:	b08b      	sub	sp, #44	@ 0x2c
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	613b      	str	r3, [r7, #16]
  return result;
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002174:	2320      	movs	r3, #32
 8002176:	e003      	b.n	8002180 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	2103      	movs	r1, #3
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	401a      	ands	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	61fb      	str	r3, [r7, #28]
  return result;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80021a2:	2320      	movs	r3, #32
 80021a4:	e003      	b.n	80021ae <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	431a      	orrs	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	60da      	str	r2, [r3, #12]
}
 80021bc:	bf00      	nop
 80021be:	372c      	adds	r7, #44	@ 0x2c
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_GPIO_SetAFPin_0_7>:
{
 80021c8:	b480      	push	{r7}
 80021ca:	b08b      	sub	sp, #44	@ 0x2c
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a1a      	ldr	r2, [r3, #32]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa93 f3a3 	rbit	r3, r3
 80021e2:	613b      	str	r3, [r7, #16]
  return result;
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80021ee:	2320      	movs	r3, #32
 80021f0:	e003      	b.n	80021fa <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	fab3 f383 	clz	r3, r3
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	210f      	movs	r1, #15
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	401a      	ands	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	61fb      	str	r3, [r7, #28]
  return result;
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800221c:	2320      	movs	r3, #32
 800221e:	e003      	b.n	8002228 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	431a      	orrs	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	621a      	str	r2, [r3, #32]
}
 8002236:	bf00      	nop
 8002238:	372c      	adds	r7, #44	@ 0x2c
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <LL_GPIO_SetAFPin_8_15>:
{
 8002242:	b480      	push	{r7}
 8002244:	b08b      	sub	sp, #44	@ 0x2c
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	613b      	str	r3, [r7, #16]
  return result;
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800226a:	2320      	movs	r3, #32
 800226c:	e003      	b.n	8002276 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	210f      	movs	r1, #15
 800227a:	fa01 f303 	lsl.w	r3, r1, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	401a      	ands	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	61fb      	str	r3, [r7, #28]
  return result;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800229a:	2320      	movs	r3, #32
 800229c:	e003      	b.n	80022a6 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	431a      	orrs	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80022b4:	bf00      	nop
 80022b6:	372c      	adds	r7, #44	@ 0x2c
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	@ 0x28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	617b      	str	r3, [r7, #20]
  return result;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <LL_GPIO_Init+0x2e>
    return 32U;
 80022ea:	2320      	movs	r3, #32
 80022ec:	e003      	b.n	80022f6 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	fab3 f383 	clz	r3, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80022f8:	e057      	b.n	80023aa <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	2101      	movs	r1, #1
 8002300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	4013      	ands	r3, r2
 8002308:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d049      	beq.n	80023a4 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d003      	beq.n	8002320 <LL_GPIO_Init+0x60>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b02      	cmp	r3, #2
 800231e:	d10d      	bne.n	800233c <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	461a      	mov	r2, r3
 8002326:	6a39      	ldr	r1, [r7, #32]
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff fed3 	bl	80020d4 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	461a      	mov	r2, r3
 8002334:	6a39      	ldr	r1, [r7, #32]
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff feb4 	bl	80020a4 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	461a      	mov	r2, r3
 8002342:	6a39      	ldr	r1, [r7, #32]
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff ff02 	bl	800214e <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d121      	bne.n	8002396 <LL_GPIO_Init+0xd6>
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	fa93 f3a3 	rbit	r3, r3
 800235c:	60bb      	str	r3, [r7, #8]
  return result;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <LL_GPIO_Init+0xac>
    return 32U;
 8002368:	2320      	movs	r3, #32
 800236a:	e003      	b.n	8002374 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002374:	2b07      	cmp	r3, #7
 8002376:	d807      	bhi.n	8002388 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	461a      	mov	r2, r3
 800237e:	6a39      	ldr	r1, [r7, #32]
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff ff21 	bl	80021c8 <LL_GPIO_SetAFPin_0_7>
 8002386:	e006      	b.n	8002396 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	461a      	mov	r2, r3
 800238e:	6a39      	ldr	r1, [r7, #32]
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff ff56 	bl	8002242 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	461a      	mov	r2, r3
 800239c:	6a39      	ldr	r1, [r7, #32]
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff fe43 	bl	800202a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80023a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a6:	3301      	adds	r3, #1
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b0:	fa22 f303 	lsr.w	r3, r2, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1a0      	bne.n	80022fa <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3728      	adds	r7, #40	@ 0x28
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <LL_RCC_GetSysClkSource>:
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80023c8:	4b04      	ldr	r3, [pc, #16]	@ (80023dc <LL_RCC_GetSysClkSource+0x18>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 030c 	and.w	r3, r3, #12
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40023800 	.word	0x40023800

080023e0 <LL_RCC_GetAHBPrescaler>:
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80023e4:	4b04      	ldr	r3, [pc, #16]	@ (80023f8 <LL_RCC_GetAHBPrescaler+0x18>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40023800 	.word	0x40023800

080023fc <LL_RCC_GetAPB1Prescaler>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002400:	4b04      	ldr	r3, [pc, #16]	@ (8002414 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800

08002418 <LL_RCC_GetAPB2Prescaler>:
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800241c:	4b04      	ldr	r3, [pc, #16]	@ (8002430 <LL_RCC_GetAPB2Prescaler+0x18>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800

08002434 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002438:	4b04      	ldr	r3, [pc, #16]	@ (800244c <LL_RCC_PLL_GetMainSource+0x18>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8002440:	4618      	mov	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800

08002450 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002454:	4b04      	ldr	r3, [pc, #16]	@ (8002468 <LL_RCC_PLL_GetN+0x18>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	099b      	lsrs	r3, r3, #6
 800245a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	40023800 	.word	0x40023800

0800246c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002470:	4b04      	ldr	r3, [pc, #16]	@ (8002484 <LL_RCC_PLL_GetP+0x18>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002478:	4618      	mov	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800

08002488 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800248c:	4b04      	ldr	r3, [pc, #16]	@ (80024a0 <LL_RCC_PLL_GetDivider+0x18>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800

080024a4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80024ac:	f000 f820 	bl	80024f0 <RCC_GetSystemClockFreq>
 80024b0:	4602      	mov	r2, r0
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 f840 	bl	8002540 <RCC_GetHCLKClockFreq>
 80024c0:	4602      	mov	r2, r0
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 f84e 	bl	800256c <RCC_GetPCLK1ClockFreq>
 80024d0:	4602      	mov	r2, r0
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 f85a 	bl	8002594 <RCC_GetPCLK2ClockFreq>
 80024e0:	4602      	mov	r2, r0
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	60da      	str	r2, [r3, #12]
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80024fa:	f7ff ff63 	bl	80023c4 <LL_RCC_GetSysClkSource>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b08      	cmp	r3, #8
 8002502:	d00c      	beq.n	800251e <RCC_GetSystemClockFreq+0x2e>
 8002504:	2b08      	cmp	r3, #8
 8002506:	d80f      	bhi.n	8002528 <RCC_GetSystemClockFreq+0x38>
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <RCC_GetSystemClockFreq+0x22>
 800250c:	2b04      	cmp	r3, #4
 800250e:	d003      	beq.n	8002518 <RCC_GetSystemClockFreq+0x28>
 8002510:	e00a      	b.n	8002528 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002512:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <RCC_GetSystemClockFreq+0x48>)
 8002514:	607b      	str	r3, [r7, #4]
      break;
 8002516:	e00a      	b.n	800252e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002518:	4b08      	ldr	r3, [pc, #32]	@ (800253c <RCC_GetSystemClockFreq+0x4c>)
 800251a:	607b      	str	r3, [r7, #4]
      break;
 800251c:	e007      	b.n	800252e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800251e:	2008      	movs	r0, #8
 8002520:	f000 f84c 	bl	80025bc <RCC_PLL_GetFreqDomain_SYS>
 8002524:	6078      	str	r0, [r7, #4]
      break;
 8002526:	e002      	b.n	800252e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002528:	4b03      	ldr	r3, [pc, #12]	@ (8002538 <RCC_GetSystemClockFreq+0x48>)
 800252a:	607b      	str	r3, [r7, #4]
      break;
 800252c:	bf00      	nop
  }

  return frequency;
 800252e:	687b      	ldr	r3, [r7, #4]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	00f42400 	.word	0x00f42400
 800253c:	007a1200 	.word	0x007a1200

08002540 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002548:	f7ff ff4a 	bl	80023e0 <LL_RCC_GetAHBPrescaler>
 800254c:	4603      	mov	r3, r0
 800254e:	091b      	lsrs	r3, r3, #4
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	4a04      	ldr	r2, [pc, #16]	@ (8002568 <RCC_GetHCLKClockFreq+0x28>)
 8002556:	5cd3      	ldrb	r3, [r2, r3]
 8002558:	461a      	mov	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	40d3      	lsrs	r3, r2
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	08003614 	.word	0x08003614

0800256c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002574:	f7ff ff42 	bl	80023fc <LL_RCC_GetAPB1Prescaler>
 8002578:	4603      	mov	r3, r0
 800257a:	0a9b      	lsrs	r3, r3, #10
 800257c:	4a04      	ldr	r2, [pc, #16]	@ (8002590 <RCC_GetPCLK1ClockFreq+0x24>)
 800257e:	5cd3      	ldrb	r3, [r2, r3]
 8002580:	461a      	mov	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	40d3      	lsrs	r3, r2
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	08003624 	.word	0x08003624

08002594 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800259c:	f7ff ff3c 	bl	8002418 <LL_RCC_GetAPB2Prescaler>
 80025a0:	4603      	mov	r3, r0
 80025a2:	0b5b      	lsrs	r3, r3, #13
 80025a4:	4a04      	ldr	r2, [pc, #16]	@ (80025b8 <RCC_GetPCLK2ClockFreq+0x24>)
 80025a6:	5cd3      	ldrb	r3, [r2, r3]
 80025a8:	461a      	mov	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	40d3      	lsrs	r3, r2
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	08003624 	.word	0x08003624

080025bc <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80025d0:	f7ff ff30 	bl	8002434 <LL_RCC_PLL_GetMainSource>
 80025d4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d004      	beq.n	80025e6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025e2:	d003      	beq.n	80025ec <RCC_PLL_GetFreqDomain_SYS+0x30>
 80025e4:	e005      	b.n	80025f2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80025e6:	4b12      	ldr	r3, [pc, #72]	@ (8002630 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80025e8:	617b      	str	r3, [r7, #20]
      break;
 80025ea:	e005      	b.n	80025f8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80025ec:	4b11      	ldr	r3, [pc, #68]	@ (8002634 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80025ee:	617b      	str	r3, [r7, #20]
      break;
 80025f0:	e002      	b.n	80025f8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80025f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002630 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80025f4:	617b      	str	r3, [r7, #20]
      break;
 80025f6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d113      	bne.n	8002626 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80025fe:	f7ff ff43 	bl	8002488 <LL_RCC_PLL_GetDivider>
 8002602:	4602      	mov	r2, r0
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	fbb3 f4f2 	udiv	r4, r3, r2
 800260a:	f7ff ff21 	bl	8002450 <LL_RCC_PLL_GetN>
 800260e:	4603      	mov	r3, r0
 8002610:	fb03 f404 	mul.w	r4, r3, r4
 8002614:	f7ff ff2a 	bl	800246c <LL_RCC_PLL_GetP>
 8002618:	4603      	mov	r3, r0
 800261a:	0c1b      	lsrs	r3, r3, #16
 800261c:	3301      	adds	r3, #1
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fbb4 f3f3 	udiv	r3, r4, r3
 8002624:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002626:	693b      	ldr	r3, [r7, #16]
}
 8002628:	4618      	mov	r0, r3
 800262a:	371c      	adds	r7, #28
 800262c:	46bd      	mov	sp, r7
 800262e:	bd90      	pop	{r4, r7, pc}
 8002630:	00f42400 	.word	0x00f42400
 8002634:	007a1200 	.word	0x007a1200

08002638 <LL_USART_IsEnabled>:
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002648:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800264c:	bf0c      	ite	eq
 800264e:	2301      	moveq	r3, #1
 8002650:	2300      	movne	r3, #0
 8002652:	b2db      	uxtb	r3, r3
}
 8002654:	4618      	mov	r0, r3
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <LL_USART_SetStopBitsLength>:
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	611a      	str	r2, [r3, #16]
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <LL_USART_SetHWFlowCtrl>:
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	615a      	str	r2, [r3, #20]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <LL_USART_SetBaudRate>:
{
 80026ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b0:	b0c0      	sub	sp, #256	@ 0x100
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80026b8:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80026bc:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80026c0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80026c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026cc:	f040 810c 	bne.w	80028e8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80026d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80026d4:	2200      	movs	r2, #0
 80026d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80026da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80026de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80026e2:	4622      	mov	r2, r4
 80026e4:	462b      	mov	r3, r5
 80026e6:	1891      	adds	r1, r2, r2
 80026e8:	6639      	str	r1, [r7, #96]	@ 0x60
 80026ea:	415b      	adcs	r3, r3
 80026ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80026ee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80026f2:	4621      	mov	r1, r4
 80026f4:	eb12 0801 	adds.w	r8, r2, r1
 80026f8:	4629      	mov	r1, r5
 80026fa:	eb43 0901 	adc.w	r9, r3, r1
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800270a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800270e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002712:	4690      	mov	r8, r2
 8002714:	4699      	mov	r9, r3
 8002716:	4623      	mov	r3, r4
 8002718:	eb18 0303 	adds.w	r3, r8, r3
 800271c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002720:	462b      	mov	r3, r5
 8002722:	eb49 0303 	adc.w	r3, r9, r3
 8002726:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800272a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800272e:	2200      	movs	r2, #0
 8002730:	469a      	mov	sl, r3
 8002732:	4693      	mov	fp, r2
 8002734:	eb1a 030a 	adds.w	r3, sl, sl
 8002738:	65bb      	str	r3, [r7, #88]	@ 0x58
 800273a:	eb4b 030b 	adc.w	r3, fp, fp
 800273e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002740:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002744:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002748:	f7fd fd9a 	bl	8000280 <__aeabi_uldivmod>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4b64      	ldr	r3, [pc, #400]	@ (80028e4 <LL_USART_SetBaudRate+0x238>)
 8002752:	fba3 2302 	umull	r2, r3, r3, r2
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	b29b      	uxth	r3, r3
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	b29c      	uxth	r4, r3
 800275e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002762:	2200      	movs	r2, #0
 8002764:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002768:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800276c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8002770:	4642      	mov	r2, r8
 8002772:	464b      	mov	r3, r9
 8002774:	1891      	adds	r1, r2, r2
 8002776:	6539      	str	r1, [r7, #80]	@ 0x50
 8002778:	415b      	adcs	r3, r3
 800277a:	657b      	str	r3, [r7, #84]	@ 0x54
 800277c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002780:	4641      	mov	r1, r8
 8002782:	1851      	adds	r1, r2, r1
 8002784:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002786:	4649      	mov	r1, r9
 8002788:	414b      	adcs	r3, r1
 800278a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8002798:	4659      	mov	r1, fp
 800279a:	00cb      	lsls	r3, r1, #3
 800279c:	4651      	mov	r1, sl
 800279e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027a2:	4651      	mov	r1, sl
 80027a4:	00ca      	lsls	r2, r1, #3
 80027a6:	4610      	mov	r0, r2
 80027a8:	4619      	mov	r1, r3
 80027aa:	4603      	mov	r3, r0
 80027ac:	4642      	mov	r2, r8
 80027ae:	189b      	adds	r3, r3, r2
 80027b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027b4:	464b      	mov	r3, r9
 80027b6:	460a      	mov	r2, r1
 80027b8:	eb42 0303 	adc.w	r3, r2, r3
 80027bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80027c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80027c4:	2200      	movs	r2, #0
 80027c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80027ca:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80027ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80027d2:	460b      	mov	r3, r1
 80027d4:	18db      	adds	r3, r3, r3
 80027d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80027d8:	4613      	mov	r3, r2
 80027da:	eb42 0303 	adc.w	r3, r2, r3
 80027de:	647b      	str	r3, [r7, #68]	@ 0x44
 80027e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80027e4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80027e8:	f7fd fd4a 	bl	8000280 <__aeabi_uldivmod>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4611      	mov	r1, r2
 80027f2:	4b3c      	ldr	r3, [pc, #240]	@ (80028e4 <LL_USART_SetBaudRate+0x238>)
 80027f4:	fba3 2301 	umull	r2, r3, r3, r1
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	2264      	movs	r2, #100	@ 0x64
 80027fc:	fb02 f303 	mul.w	r3, r2, r3
 8002800:	1acb      	subs	r3, r1, r3
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002808:	4b36      	ldr	r3, [pc, #216]	@ (80028e4 <LL_USART_SetBaudRate+0x238>)
 800280a:	fba3 2302 	umull	r2, r3, r3, r2
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	b29b      	uxth	r3, r3
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	b29b      	uxth	r3, r3
 8002816:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800281a:	b29b      	uxth	r3, r3
 800281c:	4423      	add	r3, r4
 800281e:	b29c      	uxth	r4, r3
 8002820:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002824:	2200      	movs	r2, #0
 8002826:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800282a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800282e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8002832:	4642      	mov	r2, r8
 8002834:	464b      	mov	r3, r9
 8002836:	1891      	adds	r1, r2, r2
 8002838:	63b9      	str	r1, [r7, #56]	@ 0x38
 800283a:	415b      	adcs	r3, r3
 800283c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800283e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002842:	4641      	mov	r1, r8
 8002844:	1851      	adds	r1, r2, r1
 8002846:	6339      	str	r1, [r7, #48]	@ 0x30
 8002848:	4649      	mov	r1, r9
 800284a:	414b      	adcs	r3, r1
 800284c:	637b      	str	r3, [r7, #52]	@ 0x34
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800285a:	4659      	mov	r1, fp
 800285c:	00cb      	lsls	r3, r1, #3
 800285e:	4651      	mov	r1, sl
 8002860:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002864:	4651      	mov	r1, sl
 8002866:	00ca      	lsls	r2, r1, #3
 8002868:	4610      	mov	r0, r2
 800286a:	4619      	mov	r1, r3
 800286c:	4603      	mov	r3, r0
 800286e:	4642      	mov	r2, r8
 8002870:	189b      	adds	r3, r3, r2
 8002872:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002876:	464b      	mov	r3, r9
 8002878:	460a      	mov	r2, r1
 800287a:	eb42 0303 	adc.w	r3, r2, r3
 800287e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002882:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002886:	2200      	movs	r2, #0
 8002888:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800288c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8002890:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002894:	460b      	mov	r3, r1
 8002896:	18db      	adds	r3, r3, r3
 8002898:	62bb      	str	r3, [r7, #40]	@ 0x28
 800289a:	4613      	mov	r3, r2
 800289c:	eb42 0303 	adc.w	r3, r2, r3
 80028a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80028a6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80028aa:	f7fd fce9 	bl	8000280 <__aeabi_uldivmod>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4b0c      	ldr	r3, [pc, #48]	@ (80028e4 <LL_USART_SetBaudRate+0x238>)
 80028b4:	fba3 1302 	umull	r1, r3, r3, r2
 80028b8:	095b      	lsrs	r3, r3, #5
 80028ba:	2164      	movs	r1, #100	@ 0x64
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	3332      	adds	r3, #50	@ 0x32
 80028c6:	4a07      	ldr	r2, [pc, #28]	@ (80028e4 <LL_USART_SetBaudRate+0x238>)
 80028c8:	fba2 2303 	umull	r2, r3, r2, r3
 80028cc:	095b      	lsrs	r3, r3, #5
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	4423      	add	r3, r4
 80028d8:	b29b      	uxth	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028e0:	609a      	str	r2, [r3, #8]
}
 80028e2:	e108      	b.n	8002af6 <LL_USART_SetBaudRate+0x44a>
 80028e4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80028e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028ec:	2200      	movs	r2, #0
 80028ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80028f2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80028f6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80028fa:	4642      	mov	r2, r8
 80028fc:	464b      	mov	r3, r9
 80028fe:	1891      	adds	r1, r2, r2
 8002900:	6239      	str	r1, [r7, #32]
 8002902:	415b      	adcs	r3, r3
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
 8002906:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800290a:	4641      	mov	r1, r8
 800290c:	1854      	adds	r4, r2, r1
 800290e:	4649      	mov	r1, r9
 8002910:	eb43 0501 	adc.w	r5, r3, r1
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	00eb      	lsls	r3, r5, #3
 800291e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002922:	00e2      	lsls	r2, r4, #3
 8002924:	4614      	mov	r4, r2
 8002926:	461d      	mov	r5, r3
 8002928:	4643      	mov	r3, r8
 800292a:	18e3      	adds	r3, r4, r3
 800292c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002930:	464b      	mov	r3, r9
 8002932:	eb45 0303 	adc.w	r3, r5, r3
 8002936:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800293a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800293e:	2200      	movs	r2, #0
 8002940:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002944:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8002954:	4629      	mov	r1, r5
 8002956:	008b      	lsls	r3, r1, #2
 8002958:	4621      	mov	r1, r4
 800295a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800295e:	4621      	mov	r1, r4
 8002960:	008a      	lsls	r2, r1, #2
 8002962:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002966:	f7fd fc8b 	bl	8000280 <__aeabi_uldivmod>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4b65      	ldr	r3, [pc, #404]	@ (8002b04 <LL_USART_SetBaudRate+0x458>)
 8002970:	fba3 2302 	umull	r2, r3, r3, r2
 8002974:	095b      	lsrs	r3, r3, #5
 8002976:	b29b      	uxth	r3, r3
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	b29c      	uxth	r4, r3
 800297c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002980:	2200      	movs	r2, #0
 8002982:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002986:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800298a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800298e:	4642      	mov	r2, r8
 8002990:	464b      	mov	r3, r9
 8002992:	1891      	adds	r1, r2, r2
 8002994:	61b9      	str	r1, [r7, #24]
 8002996:	415b      	adcs	r3, r3
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800299e:	4641      	mov	r1, r8
 80029a0:	1851      	adds	r1, r2, r1
 80029a2:	6139      	str	r1, [r7, #16]
 80029a4:	4649      	mov	r1, r9
 80029a6:	414b      	adcs	r3, r1
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029b6:	4659      	mov	r1, fp
 80029b8:	00cb      	lsls	r3, r1, #3
 80029ba:	4651      	mov	r1, sl
 80029bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029c0:	4651      	mov	r1, sl
 80029c2:	00ca      	lsls	r2, r1, #3
 80029c4:	4610      	mov	r0, r2
 80029c6:	4619      	mov	r1, r3
 80029c8:	4603      	mov	r3, r0
 80029ca:	4642      	mov	r2, r8
 80029cc:	189b      	adds	r3, r3, r2
 80029ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80029d2:	464b      	mov	r3, r9
 80029d4:	460a      	mov	r2, r1
 80029d6:	eb42 0303 	adc.w	r3, r2, r3
 80029da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80029de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80029e2:	2200      	movs	r2, #0
 80029e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80029e8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80029f8:	4649      	mov	r1, r9
 80029fa:	008b      	lsls	r3, r1, #2
 80029fc:	4641      	mov	r1, r8
 80029fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a02:	4641      	mov	r1, r8
 8002a04:	008a      	lsls	r2, r1, #2
 8002a06:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8002a0a:	f7fd fc39 	bl	8000280 <__aeabi_uldivmod>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4611      	mov	r1, r2
 8002a14:	4b3b      	ldr	r3, [pc, #236]	@ (8002b04 <LL_USART_SetBaudRate+0x458>)
 8002a16:	fba3 2301 	umull	r2, r3, r3, r1
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	2264      	movs	r2, #100	@ 0x64
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	1acb      	subs	r3, r1, r3
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	3332      	adds	r3, #50	@ 0x32
 8002a28:	4a36      	ldr	r2, [pc, #216]	@ (8002b04 <LL_USART_SetBaudRate+0x458>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	4423      	add	r3, r4
 8002a3a:	b29c      	uxth	r4, r3
 8002a3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a40:	2200      	movs	r2, #0
 8002a42:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a44:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a46:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002a4a:	4642      	mov	r2, r8
 8002a4c:	464b      	mov	r3, r9
 8002a4e:	1891      	adds	r1, r2, r2
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	415b      	adcs	r3, r3
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a5a:	4641      	mov	r1, r8
 8002a5c:	1851      	adds	r1, r2, r1
 8002a5e:	6039      	str	r1, [r7, #0]
 8002a60:	4649      	mov	r1, r9
 8002a62:	414b      	adcs	r3, r1
 8002a64:	607b      	str	r3, [r7, #4]
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a72:	4659      	mov	r1, fp
 8002a74:	00cb      	lsls	r3, r1, #3
 8002a76:	4651      	mov	r1, sl
 8002a78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a7c:	4651      	mov	r1, sl
 8002a7e:	00ca      	lsls	r2, r1, #3
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	4603      	mov	r3, r0
 8002a86:	4642      	mov	r2, r8
 8002a88:	189b      	adds	r3, r3, r2
 8002a8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a8c:	464b      	mov	r3, r9
 8002a8e:	460a      	mov	r2, r1
 8002a90:	eb42 0303 	adc.w	r3, r2, r3
 8002a94:	677b      	str	r3, [r7, #116]	@ 0x74
 8002a96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8002aac:	4649      	mov	r1, r9
 8002aae:	008b      	lsls	r3, r1, #2
 8002ab0:	4641      	mov	r1, r8
 8002ab2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ab6:	4641      	mov	r1, r8
 8002ab8:	008a      	lsls	r2, r1, #2
 8002aba:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002abe:	f7fd fbdf 	bl	8000280 <__aeabi_uldivmod>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8002b04 <LL_USART_SetBaudRate+0x458>)
 8002ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8002acc:	095b      	lsrs	r3, r3, #5
 8002ace:	2164      	movs	r1, #100	@ 0x64
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	3332      	adds	r3, #50	@ 0x32
 8002ada:	4a0a      	ldr	r2, [pc, #40]	@ (8002b04 <LL_USART_SetBaudRate+0x458>)
 8002adc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae0:	095b      	lsrs	r3, r3, #5
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	4423      	add	r3, r4
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002af4:	609a      	str	r2, [r3, #8]
}
 8002af6:	bf00      	nop
 8002af8:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002afc:	46bd      	mov	sp, r7
 8002afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b02:	bf00      	nop
 8002b04:	51eb851f 	.word	0x51eb851f

08002b08 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff fd8c 	bl	8002638 <LL_USART_IsEnabled>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d149      	bne.n	8002bba <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002b2e:	f023 030c 	bic.w	r3, r3, #12
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	6851      	ldr	r1, [r2, #4]
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	68d2      	ldr	r2, [r2, #12]
 8002b3a:	4311      	orrs	r1, r2
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	6912      	ldr	r2, [r2, #16]
 8002b40:	4311      	orrs	r1, r2
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	6992      	ldr	r2, [r2, #24]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	4619      	mov	r1, r3
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff fd83 	bl	8002660 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	4619      	mov	r1, r3
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff fd90 	bl	8002686 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002b66:	f107 0308 	add.w	r3, r7, #8
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fc9a 	bl	80024a4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a14      	ldr	r2, [pc, #80]	@ (8002bc4 <LL_USART_Init+0xbc>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d102      	bne.n	8002b7e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	61bb      	str	r3, [r7, #24]
 8002b7c:	e00c      	b.n	8002b98 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a11      	ldr	r2, [pc, #68]	@ (8002bc8 <LL_USART_Init+0xc0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d102      	bne.n	8002b8c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	e005      	b.n	8002b98 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a0f      	ldr	r2, [pc, #60]	@ (8002bcc <LL_USART_Init+0xc4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d101      	bne.n	8002b98 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00d      	beq.n	8002bba <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002bb2:	69b9      	ldr	r1, [r7, #24]
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff fd79 	bl	80026ac <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002bba:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3720      	adds	r7, #32
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40011000 	.word	0x40011000
 8002bc8:	40004400 	.word	0x40004400
 8002bcc:	40011400 	.word	0x40011400

08002bd0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c18 <LL_mDelay+0x48>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002bde:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be6:	d00c      	beq.n	8002c02 <LL_mDelay+0x32>
  {
    Delay++;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3301      	adds	r3, #1
 8002bec:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002bee:	e008      	b.n	8002c02 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002bf0:	4b09      	ldr	r3, [pc, #36]	@ (8002c18 <LL_mDelay+0x48>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <LL_mDelay+0x32>
    {
      Delay--;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f3      	bne.n	8002bf0 <LL_mDelay+0x20>
    }
  }
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	e000e010 	.word	0xe000e010

08002c1c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002c24:	4a04      	ldr	r2, [pc, #16]	@ (8002c38 <LL_SetSystemCoreClock+0x1c>)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6013      	str	r3, [r2, #0]
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	20000000 	.word	0x20000000

08002c3c <siprintf>:
 8002c3c:	b40e      	push	{r1, r2, r3}
 8002c3e:	b510      	push	{r4, lr}
 8002c40:	b09d      	sub	sp, #116	@ 0x74
 8002c42:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002c44:	9002      	str	r0, [sp, #8]
 8002c46:	9006      	str	r0, [sp, #24]
 8002c48:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002c4c:	480a      	ldr	r0, [pc, #40]	@ (8002c78 <siprintf+0x3c>)
 8002c4e:	9107      	str	r1, [sp, #28]
 8002c50:	9104      	str	r1, [sp, #16]
 8002c52:	490a      	ldr	r1, [pc, #40]	@ (8002c7c <siprintf+0x40>)
 8002c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c58:	9105      	str	r1, [sp, #20]
 8002c5a:	2400      	movs	r4, #0
 8002c5c:	a902      	add	r1, sp, #8
 8002c5e:	6800      	ldr	r0, [r0, #0]
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002c64:	f000 f99a 	bl	8002f9c <_svfiprintf_r>
 8002c68:	9b02      	ldr	r3, [sp, #8]
 8002c6a:	701c      	strb	r4, [r3, #0]
 8002c6c:	b01d      	add	sp, #116	@ 0x74
 8002c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c72:	b003      	add	sp, #12
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	2000000c 	.word	0x2000000c
 8002c7c:	ffff0208 	.word	0xffff0208

08002c80 <__errno>:
 8002c80:	4b01      	ldr	r3, [pc, #4]	@ (8002c88 <__errno+0x8>)
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	2000000c 	.word	0x2000000c

08002c8c <__libc_init_array>:
 8002c8c:	b570      	push	{r4, r5, r6, lr}
 8002c8e:	4d0d      	ldr	r5, [pc, #52]	@ (8002cc4 <__libc_init_array+0x38>)
 8002c90:	4c0d      	ldr	r4, [pc, #52]	@ (8002cc8 <__libc_init_array+0x3c>)
 8002c92:	1b64      	subs	r4, r4, r5
 8002c94:	10a4      	asrs	r4, r4, #2
 8002c96:	2600      	movs	r6, #0
 8002c98:	42a6      	cmp	r6, r4
 8002c9a:	d109      	bne.n	8002cb0 <__libc_init_array+0x24>
 8002c9c:	4d0b      	ldr	r5, [pc, #44]	@ (8002ccc <__libc_init_array+0x40>)
 8002c9e:	4c0c      	ldr	r4, [pc, #48]	@ (8002cd0 <__libc_init_array+0x44>)
 8002ca0:	f000 fc64 	bl	800356c <_init>
 8002ca4:	1b64      	subs	r4, r4, r5
 8002ca6:	10a4      	asrs	r4, r4, #2
 8002ca8:	2600      	movs	r6, #0
 8002caa:	42a6      	cmp	r6, r4
 8002cac:	d105      	bne.n	8002cba <__libc_init_array+0x2e>
 8002cae:	bd70      	pop	{r4, r5, r6, pc}
 8002cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cb4:	4798      	blx	r3
 8002cb6:	3601      	adds	r6, #1
 8002cb8:	e7ee      	b.n	8002c98 <__libc_init_array+0xc>
 8002cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cbe:	4798      	blx	r3
 8002cc0:	3601      	adds	r6, #1
 8002cc2:	e7f2      	b.n	8002caa <__libc_init_array+0x1e>
 8002cc4:	08003668 	.word	0x08003668
 8002cc8:	08003668 	.word	0x08003668
 8002ccc:	08003668 	.word	0x08003668
 8002cd0:	0800366c 	.word	0x0800366c

08002cd4 <__retarget_lock_acquire_recursive>:
 8002cd4:	4770      	bx	lr

08002cd6 <__retarget_lock_release_recursive>:
 8002cd6:	4770      	bx	lr

08002cd8 <memcpy>:
 8002cd8:	440a      	add	r2, r1
 8002cda:	4291      	cmp	r1, r2
 8002cdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002ce0:	d100      	bne.n	8002ce4 <memcpy+0xc>
 8002ce2:	4770      	bx	lr
 8002ce4:	b510      	push	{r4, lr}
 8002ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002cee:	4291      	cmp	r1, r2
 8002cf0:	d1f9      	bne.n	8002ce6 <memcpy+0xe>
 8002cf2:	bd10      	pop	{r4, pc}

08002cf4 <_free_r>:
 8002cf4:	b538      	push	{r3, r4, r5, lr}
 8002cf6:	4605      	mov	r5, r0
 8002cf8:	2900      	cmp	r1, #0
 8002cfa:	d041      	beq.n	8002d80 <_free_r+0x8c>
 8002cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d00:	1f0c      	subs	r4, r1, #4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	bfb8      	it	lt
 8002d06:	18e4      	addlt	r4, r4, r3
 8002d08:	f000 f8e0 	bl	8002ecc <__malloc_lock>
 8002d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8002d84 <_free_r+0x90>)
 8002d0e:	6813      	ldr	r3, [r2, #0]
 8002d10:	b933      	cbnz	r3, 8002d20 <_free_r+0x2c>
 8002d12:	6063      	str	r3, [r4, #4]
 8002d14:	6014      	str	r4, [r2, #0]
 8002d16:	4628      	mov	r0, r5
 8002d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d1c:	f000 b8dc 	b.w	8002ed8 <__malloc_unlock>
 8002d20:	42a3      	cmp	r3, r4
 8002d22:	d908      	bls.n	8002d36 <_free_r+0x42>
 8002d24:	6820      	ldr	r0, [r4, #0]
 8002d26:	1821      	adds	r1, r4, r0
 8002d28:	428b      	cmp	r3, r1
 8002d2a:	bf01      	itttt	eq
 8002d2c:	6819      	ldreq	r1, [r3, #0]
 8002d2e:	685b      	ldreq	r3, [r3, #4]
 8002d30:	1809      	addeq	r1, r1, r0
 8002d32:	6021      	streq	r1, [r4, #0]
 8002d34:	e7ed      	b.n	8002d12 <_free_r+0x1e>
 8002d36:	461a      	mov	r2, r3
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	b10b      	cbz	r3, 8002d40 <_free_r+0x4c>
 8002d3c:	42a3      	cmp	r3, r4
 8002d3e:	d9fa      	bls.n	8002d36 <_free_r+0x42>
 8002d40:	6811      	ldr	r1, [r2, #0]
 8002d42:	1850      	adds	r0, r2, r1
 8002d44:	42a0      	cmp	r0, r4
 8002d46:	d10b      	bne.n	8002d60 <_free_r+0x6c>
 8002d48:	6820      	ldr	r0, [r4, #0]
 8002d4a:	4401      	add	r1, r0
 8002d4c:	1850      	adds	r0, r2, r1
 8002d4e:	4283      	cmp	r3, r0
 8002d50:	6011      	str	r1, [r2, #0]
 8002d52:	d1e0      	bne.n	8002d16 <_free_r+0x22>
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	6053      	str	r3, [r2, #4]
 8002d5a:	4408      	add	r0, r1
 8002d5c:	6010      	str	r0, [r2, #0]
 8002d5e:	e7da      	b.n	8002d16 <_free_r+0x22>
 8002d60:	d902      	bls.n	8002d68 <_free_r+0x74>
 8002d62:	230c      	movs	r3, #12
 8002d64:	602b      	str	r3, [r5, #0]
 8002d66:	e7d6      	b.n	8002d16 <_free_r+0x22>
 8002d68:	6820      	ldr	r0, [r4, #0]
 8002d6a:	1821      	adds	r1, r4, r0
 8002d6c:	428b      	cmp	r3, r1
 8002d6e:	bf04      	itt	eq
 8002d70:	6819      	ldreq	r1, [r3, #0]
 8002d72:	685b      	ldreq	r3, [r3, #4]
 8002d74:	6063      	str	r3, [r4, #4]
 8002d76:	bf04      	itt	eq
 8002d78:	1809      	addeq	r1, r1, r0
 8002d7a:	6021      	streq	r1, [r4, #0]
 8002d7c:	6054      	str	r4, [r2, #4]
 8002d7e:	e7ca      	b.n	8002d16 <_free_r+0x22>
 8002d80:	bd38      	pop	{r3, r4, r5, pc}
 8002d82:	bf00      	nop
 8002d84:	2000020c 	.word	0x2000020c

08002d88 <sbrk_aligned>:
 8002d88:	b570      	push	{r4, r5, r6, lr}
 8002d8a:	4e0f      	ldr	r6, [pc, #60]	@ (8002dc8 <sbrk_aligned+0x40>)
 8002d8c:	460c      	mov	r4, r1
 8002d8e:	6831      	ldr	r1, [r6, #0]
 8002d90:	4605      	mov	r5, r0
 8002d92:	b911      	cbnz	r1, 8002d9a <sbrk_aligned+0x12>
 8002d94:	f000 fba4 	bl	80034e0 <_sbrk_r>
 8002d98:	6030      	str	r0, [r6, #0]
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	4628      	mov	r0, r5
 8002d9e:	f000 fb9f 	bl	80034e0 <_sbrk_r>
 8002da2:	1c43      	adds	r3, r0, #1
 8002da4:	d103      	bne.n	8002dae <sbrk_aligned+0x26>
 8002da6:	f04f 34ff 	mov.w	r4, #4294967295
 8002daa:	4620      	mov	r0, r4
 8002dac:	bd70      	pop	{r4, r5, r6, pc}
 8002dae:	1cc4      	adds	r4, r0, #3
 8002db0:	f024 0403 	bic.w	r4, r4, #3
 8002db4:	42a0      	cmp	r0, r4
 8002db6:	d0f8      	beq.n	8002daa <sbrk_aligned+0x22>
 8002db8:	1a21      	subs	r1, r4, r0
 8002dba:	4628      	mov	r0, r5
 8002dbc:	f000 fb90 	bl	80034e0 <_sbrk_r>
 8002dc0:	3001      	adds	r0, #1
 8002dc2:	d1f2      	bne.n	8002daa <sbrk_aligned+0x22>
 8002dc4:	e7ef      	b.n	8002da6 <sbrk_aligned+0x1e>
 8002dc6:	bf00      	nop
 8002dc8:	20000208 	.word	0x20000208

08002dcc <_malloc_r>:
 8002dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dd0:	1ccd      	adds	r5, r1, #3
 8002dd2:	f025 0503 	bic.w	r5, r5, #3
 8002dd6:	3508      	adds	r5, #8
 8002dd8:	2d0c      	cmp	r5, #12
 8002dda:	bf38      	it	cc
 8002ddc:	250c      	movcc	r5, #12
 8002dde:	2d00      	cmp	r5, #0
 8002de0:	4606      	mov	r6, r0
 8002de2:	db01      	blt.n	8002de8 <_malloc_r+0x1c>
 8002de4:	42a9      	cmp	r1, r5
 8002de6:	d904      	bls.n	8002df2 <_malloc_r+0x26>
 8002de8:	230c      	movs	r3, #12
 8002dea:	6033      	str	r3, [r6, #0]
 8002dec:	2000      	movs	r0, #0
 8002dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002df2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002ec8 <_malloc_r+0xfc>
 8002df6:	f000 f869 	bl	8002ecc <__malloc_lock>
 8002dfa:	f8d8 3000 	ldr.w	r3, [r8]
 8002dfe:	461c      	mov	r4, r3
 8002e00:	bb44      	cbnz	r4, 8002e54 <_malloc_r+0x88>
 8002e02:	4629      	mov	r1, r5
 8002e04:	4630      	mov	r0, r6
 8002e06:	f7ff ffbf 	bl	8002d88 <sbrk_aligned>
 8002e0a:	1c43      	adds	r3, r0, #1
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	d158      	bne.n	8002ec2 <_malloc_r+0xf6>
 8002e10:	f8d8 4000 	ldr.w	r4, [r8]
 8002e14:	4627      	mov	r7, r4
 8002e16:	2f00      	cmp	r7, #0
 8002e18:	d143      	bne.n	8002ea2 <_malloc_r+0xd6>
 8002e1a:	2c00      	cmp	r4, #0
 8002e1c:	d04b      	beq.n	8002eb6 <_malloc_r+0xea>
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	4639      	mov	r1, r7
 8002e22:	4630      	mov	r0, r6
 8002e24:	eb04 0903 	add.w	r9, r4, r3
 8002e28:	f000 fb5a 	bl	80034e0 <_sbrk_r>
 8002e2c:	4581      	cmp	r9, r0
 8002e2e:	d142      	bne.n	8002eb6 <_malloc_r+0xea>
 8002e30:	6821      	ldr	r1, [r4, #0]
 8002e32:	1a6d      	subs	r5, r5, r1
 8002e34:	4629      	mov	r1, r5
 8002e36:	4630      	mov	r0, r6
 8002e38:	f7ff ffa6 	bl	8002d88 <sbrk_aligned>
 8002e3c:	3001      	adds	r0, #1
 8002e3e:	d03a      	beq.n	8002eb6 <_malloc_r+0xea>
 8002e40:	6823      	ldr	r3, [r4, #0]
 8002e42:	442b      	add	r3, r5
 8002e44:	6023      	str	r3, [r4, #0]
 8002e46:	f8d8 3000 	ldr.w	r3, [r8]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	bb62      	cbnz	r2, 8002ea8 <_malloc_r+0xdc>
 8002e4e:	f8c8 7000 	str.w	r7, [r8]
 8002e52:	e00f      	b.n	8002e74 <_malloc_r+0xa8>
 8002e54:	6822      	ldr	r2, [r4, #0]
 8002e56:	1b52      	subs	r2, r2, r5
 8002e58:	d420      	bmi.n	8002e9c <_malloc_r+0xd0>
 8002e5a:	2a0b      	cmp	r2, #11
 8002e5c:	d917      	bls.n	8002e8e <_malloc_r+0xc2>
 8002e5e:	1961      	adds	r1, r4, r5
 8002e60:	42a3      	cmp	r3, r4
 8002e62:	6025      	str	r5, [r4, #0]
 8002e64:	bf18      	it	ne
 8002e66:	6059      	strne	r1, [r3, #4]
 8002e68:	6863      	ldr	r3, [r4, #4]
 8002e6a:	bf08      	it	eq
 8002e6c:	f8c8 1000 	streq.w	r1, [r8]
 8002e70:	5162      	str	r2, [r4, r5]
 8002e72:	604b      	str	r3, [r1, #4]
 8002e74:	4630      	mov	r0, r6
 8002e76:	f000 f82f 	bl	8002ed8 <__malloc_unlock>
 8002e7a:	f104 000b 	add.w	r0, r4, #11
 8002e7e:	1d23      	adds	r3, r4, #4
 8002e80:	f020 0007 	bic.w	r0, r0, #7
 8002e84:	1ac2      	subs	r2, r0, r3
 8002e86:	bf1c      	itt	ne
 8002e88:	1a1b      	subne	r3, r3, r0
 8002e8a:	50a3      	strne	r3, [r4, r2]
 8002e8c:	e7af      	b.n	8002dee <_malloc_r+0x22>
 8002e8e:	6862      	ldr	r2, [r4, #4]
 8002e90:	42a3      	cmp	r3, r4
 8002e92:	bf0c      	ite	eq
 8002e94:	f8c8 2000 	streq.w	r2, [r8]
 8002e98:	605a      	strne	r2, [r3, #4]
 8002e9a:	e7eb      	b.n	8002e74 <_malloc_r+0xa8>
 8002e9c:	4623      	mov	r3, r4
 8002e9e:	6864      	ldr	r4, [r4, #4]
 8002ea0:	e7ae      	b.n	8002e00 <_malloc_r+0x34>
 8002ea2:	463c      	mov	r4, r7
 8002ea4:	687f      	ldr	r7, [r7, #4]
 8002ea6:	e7b6      	b.n	8002e16 <_malloc_r+0x4a>
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	42a3      	cmp	r3, r4
 8002eae:	d1fb      	bne.n	8002ea8 <_malloc_r+0xdc>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	6053      	str	r3, [r2, #4]
 8002eb4:	e7de      	b.n	8002e74 <_malloc_r+0xa8>
 8002eb6:	230c      	movs	r3, #12
 8002eb8:	6033      	str	r3, [r6, #0]
 8002eba:	4630      	mov	r0, r6
 8002ebc:	f000 f80c 	bl	8002ed8 <__malloc_unlock>
 8002ec0:	e794      	b.n	8002dec <_malloc_r+0x20>
 8002ec2:	6005      	str	r5, [r0, #0]
 8002ec4:	e7d6      	b.n	8002e74 <_malloc_r+0xa8>
 8002ec6:	bf00      	nop
 8002ec8:	2000020c 	.word	0x2000020c

08002ecc <__malloc_lock>:
 8002ecc:	4801      	ldr	r0, [pc, #4]	@ (8002ed4 <__malloc_lock+0x8>)
 8002ece:	f7ff bf01 	b.w	8002cd4 <__retarget_lock_acquire_recursive>
 8002ed2:	bf00      	nop
 8002ed4:	20000204 	.word	0x20000204

08002ed8 <__malloc_unlock>:
 8002ed8:	4801      	ldr	r0, [pc, #4]	@ (8002ee0 <__malloc_unlock+0x8>)
 8002eda:	f7ff befc 	b.w	8002cd6 <__retarget_lock_release_recursive>
 8002ede:	bf00      	nop
 8002ee0:	20000204 	.word	0x20000204

08002ee4 <__ssputs_r>:
 8002ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ee8:	688e      	ldr	r6, [r1, #8]
 8002eea:	461f      	mov	r7, r3
 8002eec:	42be      	cmp	r6, r7
 8002eee:	680b      	ldr	r3, [r1, #0]
 8002ef0:	4682      	mov	sl, r0
 8002ef2:	460c      	mov	r4, r1
 8002ef4:	4690      	mov	r8, r2
 8002ef6:	d82d      	bhi.n	8002f54 <__ssputs_r+0x70>
 8002ef8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002efc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002f00:	d026      	beq.n	8002f50 <__ssputs_r+0x6c>
 8002f02:	6965      	ldr	r5, [r4, #20]
 8002f04:	6909      	ldr	r1, [r1, #16]
 8002f06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f0a:	eba3 0901 	sub.w	r9, r3, r1
 8002f0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f12:	1c7b      	adds	r3, r7, #1
 8002f14:	444b      	add	r3, r9
 8002f16:	106d      	asrs	r5, r5, #1
 8002f18:	429d      	cmp	r5, r3
 8002f1a:	bf38      	it	cc
 8002f1c:	461d      	movcc	r5, r3
 8002f1e:	0553      	lsls	r3, r2, #21
 8002f20:	d527      	bpl.n	8002f72 <__ssputs_r+0x8e>
 8002f22:	4629      	mov	r1, r5
 8002f24:	f7ff ff52 	bl	8002dcc <_malloc_r>
 8002f28:	4606      	mov	r6, r0
 8002f2a:	b360      	cbz	r0, 8002f86 <__ssputs_r+0xa2>
 8002f2c:	6921      	ldr	r1, [r4, #16]
 8002f2e:	464a      	mov	r2, r9
 8002f30:	f7ff fed2 	bl	8002cd8 <memcpy>
 8002f34:	89a3      	ldrh	r3, [r4, #12]
 8002f36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f3e:	81a3      	strh	r3, [r4, #12]
 8002f40:	6126      	str	r6, [r4, #16]
 8002f42:	6165      	str	r5, [r4, #20]
 8002f44:	444e      	add	r6, r9
 8002f46:	eba5 0509 	sub.w	r5, r5, r9
 8002f4a:	6026      	str	r6, [r4, #0]
 8002f4c:	60a5      	str	r5, [r4, #8]
 8002f4e:	463e      	mov	r6, r7
 8002f50:	42be      	cmp	r6, r7
 8002f52:	d900      	bls.n	8002f56 <__ssputs_r+0x72>
 8002f54:	463e      	mov	r6, r7
 8002f56:	6820      	ldr	r0, [r4, #0]
 8002f58:	4632      	mov	r2, r6
 8002f5a:	4641      	mov	r1, r8
 8002f5c:	f000 faa6 	bl	80034ac <memmove>
 8002f60:	68a3      	ldr	r3, [r4, #8]
 8002f62:	1b9b      	subs	r3, r3, r6
 8002f64:	60a3      	str	r3, [r4, #8]
 8002f66:	6823      	ldr	r3, [r4, #0]
 8002f68:	4433      	add	r3, r6
 8002f6a:	6023      	str	r3, [r4, #0]
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f72:	462a      	mov	r2, r5
 8002f74:	f000 fac4 	bl	8003500 <_realloc_r>
 8002f78:	4606      	mov	r6, r0
 8002f7a:	2800      	cmp	r0, #0
 8002f7c:	d1e0      	bne.n	8002f40 <__ssputs_r+0x5c>
 8002f7e:	6921      	ldr	r1, [r4, #16]
 8002f80:	4650      	mov	r0, sl
 8002f82:	f7ff feb7 	bl	8002cf4 <_free_r>
 8002f86:	230c      	movs	r3, #12
 8002f88:	f8ca 3000 	str.w	r3, [sl]
 8002f8c:	89a3      	ldrh	r3, [r4, #12]
 8002f8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f92:	81a3      	strh	r3, [r4, #12]
 8002f94:	f04f 30ff 	mov.w	r0, #4294967295
 8002f98:	e7e9      	b.n	8002f6e <__ssputs_r+0x8a>
	...

08002f9c <_svfiprintf_r>:
 8002f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa0:	4698      	mov	r8, r3
 8002fa2:	898b      	ldrh	r3, [r1, #12]
 8002fa4:	061b      	lsls	r3, r3, #24
 8002fa6:	b09d      	sub	sp, #116	@ 0x74
 8002fa8:	4607      	mov	r7, r0
 8002faa:	460d      	mov	r5, r1
 8002fac:	4614      	mov	r4, r2
 8002fae:	d510      	bpl.n	8002fd2 <_svfiprintf_r+0x36>
 8002fb0:	690b      	ldr	r3, [r1, #16]
 8002fb2:	b973      	cbnz	r3, 8002fd2 <_svfiprintf_r+0x36>
 8002fb4:	2140      	movs	r1, #64	@ 0x40
 8002fb6:	f7ff ff09 	bl	8002dcc <_malloc_r>
 8002fba:	6028      	str	r0, [r5, #0]
 8002fbc:	6128      	str	r0, [r5, #16]
 8002fbe:	b930      	cbnz	r0, 8002fce <_svfiprintf_r+0x32>
 8002fc0:	230c      	movs	r3, #12
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc8:	b01d      	add	sp, #116	@ 0x74
 8002fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fce:	2340      	movs	r3, #64	@ 0x40
 8002fd0:	616b      	str	r3, [r5, #20]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fd6:	2320      	movs	r3, #32
 8002fd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002fdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fe0:	2330      	movs	r3, #48	@ 0x30
 8002fe2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003180 <_svfiprintf_r+0x1e4>
 8002fe6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002fea:	f04f 0901 	mov.w	r9, #1
 8002fee:	4623      	mov	r3, r4
 8002ff0:	469a      	mov	sl, r3
 8002ff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ff6:	b10a      	cbz	r2, 8002ffc <_svfiprintf_r+0x60>
 8002ff8:	2a25      	cmp	r2, #37	@ 0x25
 8002ffa:	d1f9      	bne.n	8002ff0 <_svfiprintf_r+0x54>
 8002ffc:	ebba 0b04 	subs.w	fp, sl, r4
 8003000:	d00b      	beq.n	800301a <_svfiprintf_r+0x7e>
 8003002:	465b      	mov	r3, fp
 8003004:	4622      	mov	r2, r4
 8003006:	4629      	mov	r1, r5
 8003008:	4638      	mov	r0, r7
 800300a:	f7ff ff6b 	bl	8002ee4 <__ssputs_r>
 800300e:	3001      	adds	r0, #1
 8003010:	f000 80a7 	beq.w	8003162 <_svfiprintf_r+0x1c6>
 8003014:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003016:	445a      	add	r2, fp
 8003018:	9209      	str	r2, [sp, #36]	@ 0x24
 800301a:	f89a 3000 	ldrb.w	r3, [sl]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 809f 	beq.w	8003162 <_svfiprintf_r+0x1c6>
 8003024:	2300      	movs	r3, #0
 8003026:	f04f 32ff 	mov.w	r2, #4294967295
 800302a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800302e:	f10a 0a01 	add.w	sl, sl, #1
 8003032:	9304      	str	r3, [sp, #16]
 8003034:	9307      	str	r3, [sp, #28]
 8003036:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800303a:	931a      	str	r3, [sp, #104]	@ 0x68
 800303c:	4654      	mov	r4, sl
 800303e:	2205      	movs	r2, #5
 8003040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003044:	484e      	ldr	r0, [pc, #312]	@ (8003180 <_svfiprintf_r+0x1e4>)
 8003046:	f7fd f8cb 	bl	80001e0 <memchr>
 800304a:	9a04      	ldr	r2, [sp, #16]
 800304c:	b9d8      	cbnz	r0, 8003086 <_svfiprintf_r+0xea>
 800304e:	06d0      	lsls	r0, r2, #27
 8003050:	bf44      	itt	mi
 8003052:	2320      	movmi	r3, #32
 8003054:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003058:	0711      	lsls	r1, r2, #28
 800305a:	bf44      	itt	mi
 800305c:	232b      	movmi	r3, #43	@ 0x2b
 800305e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003062:	f89a 3000 	ldrb.w	r3, [sl]
 8003066:	2b2a      	cmp	r3, #42	@ 0x2a
 8003068:	d015      	beq.n	8003096 <_svfiprintf_r+0xfa>
 800306a:	9a07      	ldr	r2, [sp, #28]
 800306c:	4654      	mov	r4, sl
 800306e:	2000      	movs	r0, #0
 8003070:	f04f 0c0a 	mov.w	ip, #10
 8003074:	4621      	mov	r1, r4
 8003076:	f811 3b01 	ldrb.w	r3, [r1], #1
 800307a:	3b30      	subs	r3, #48	@ 0x30
 800307c:	2b09      	cmp	r3, #9
 800307e:	d94b      	bls.n	8003118 <_svfiprintf_r+0x17c>
 8003080:	b1b0      	cbz	r0, 80030b0 <_svfiprintf_r+0x114>
 8003082:	9207      	str	r2, [sp, #28]
 8003084:	e014      	b.n	80030b0 <_svfiprintf_r+0x114>
 8003086:	eba0 0308 	sub.w	r3, r0, r8
 800308a:	fa09 f303 	lsl.w	r3, r9, r3
 800308e:	4313      	orrs	r3, r2
 8003090:	9304      	str	r3, [sp, #16]
 8003092:	46a2      	mov	sl, r4
 8003094:	e7d2      	b.n	800303c <_svfiprintf_r+0xa0>
 8003096:	9b03      	ldr	r3, [sp, #12]
 8003098:	1d19      	adds	r1, r3, #4
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	9103      	str	r1, [sp, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	bfbb      	ittet	lt
 80030a2:	425b      	neglt	r3, r3
 80030a4:	f042 0202 	orrlt.w	r2, r2, #2
 80030a8:	9307      	strge	r3, [sp, #28]
 80030aa:	9307      	strlt	r3, [sp, #28]
 80030ac:	bfb8      	it	lt
 80030ae:	9204      	strlt	r2, [sp, #16]
 80030b0:	7823      	ldrb	r3, [r4, #0]
 80030b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80030b4:	d10a      	bne.n	80030cc <_svfiprintf_r+0x130>
 80030b6:	7863      	ldrb	r3, [r4, #1]
 80030b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80030ba:	d132      	bne.n	8003122 <_svfiprintf_r+0x186>
 80030bc:	9b03      	ldr	r3, [sp, #12]
 80030be:	1d1a      	adds	r2, r3, #4
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	9203      	str	r2, [sp, #12]
 80030c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80030c8:	3402      	adds	r4, #2
 80030ca:	9305      	str	r3, [sp, #20]
 80030cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003190 <_svfiprintf_r+0x1f4>
 80030d0:	7821      	ldrb	r1, [r4, #0]
 80030d2:	2203      	movs	r2, #3
 80030d4:	4650      	mov	r0, sl
 80030d6:	f7fd f883 	bl	80001e0 <memchr>
 80030da:	b138      	cbz	r0, 80030ec <_svfiprintf_r+0x150>
 80030dc:	9b04      	ldr	r3, [sp, #16]
 80030de:	eba0 000a 	sub.w	r0, r0, sl
 80030e2:	2240      	movs	r2, #64	@ 0x40
 80030e4:	4082      	lsls	r2, r0
 80030e6:	4313      	orrs	r3, r2
 80030e8:	3401      	adds	r4, #1
 80030ea:	9304      	str	r3, [sp, #16]
 80030ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030f0:	4824      	ldr	r0, [pc, #144]	@ (8003184 <_svfiprintf_r+0x1e8>)
 80030f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80030f6:	2206      	movs	r2, #6
 80030f8:	f7fd f872 	bl	80001e0 <memchr>
 80030fc:	2800      	cmp	r0, #0
 80030fe:	d036      	beq.n	800316e <_svfiprintf_r+0x1d2>
 8003100:	4b21      	ldr	r3, [pc, #132]	@ (8003188 <_svfiprintf_r+0x1ec>)
 8003102:	bb1b      	cbnz	r3, 800314c <_svfiprintf_r+0x1b0>
 8003104:	9b03      	ldr	r3, [sp, #12]
 8003106:	3307      	adds	r3, #7
 8003108:	f023 0307 	bic.w	r3, r3, #7
 800310c:	3308      	adds	r3, #8
 800310e:	9303      	str	r3, [sp, #12]
 8003110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003112:	4433      	add	r3, r6
 8003114:	9309      	str	r3, [sp, #36]	@ 0x24
 8003116:	e76a      	b.n	8002fee <_svfiprintf_r+0x52>
 8003118:	fb0c 3202 	mla	r2, ip, r2, r3
 800311c:	460c      	mov	r4, r1
 800311e:	2001      	movs	r0, #1
 8003120:	e7a8      	b.n	8003074 <_svfiprintf_r+0xd8>
 8003122:	2300      	movs	r3, #0
 8003124:	3401      	adds	r4, #1
 8003126:	9305      	str	r3, [sp, #20]
 8003128:	4619      	mov	r1, r3
 800312a:	f04f 0c0a 	mov.w	ip, #10
 800312e:	4620      	mov	r0, r4
 8003130:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003134:	3a30      	subs	r2, #48	@ 0x30
 8003136:	2a09      	cmp	r2, #9
 8003138:	d903      	bls.n	8003142 <_svfiprintf_r+0x1a6>
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0c6      	beq.n	80030cc <_svfiprintf_r+0x130>
 800313e:	9105      	str	r1, [sp, #20]
 8003140:	e7c4      	b.n	80030cc <_svfiprintf_r+0x130>
 8003142:	fb0c 2101 	mla	r1, ip, r1, r2
 8003146:	4604      	mov	r4, r0
 8003148:	2301      	movs	r3, #1
 800314a:	e7f0      	b.n	800312e <_svfiprintf_r+0x192>
 800314c:	ab03      	add	r3, sp, #12
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	462a      	mov	r2, r5
 8003152:	4b0e      	ldr	r3, [pc, #56]	@ (800318c <_svfiprintf_r+0x1f0>)
 8003154:	a904      	add	r1, sp, #16
 8003156:	4638      	mov	r0, r7
 8003158:	f3af 8000 	nop.w
 800315c:	1c42      	adds	r2, r0, #1
 800315e:	4606      	mov	r6, r0
 8003160:	d1d6      	bne.n	8003110 <_svfiprintf_r+0x174>
 8003162:	89ab      	ldrh	r3, [r5, #12]
 8003164:	065b      	lsls	r3, r3, #25
 8003166:	f53f af2d 	bmi.w	8002fc4 <_svfiprintf_r+0x28>
 800316a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800316c:	e72c      	b.n	8002fc8 <_svfiprintf_r+0x2c>
 800316e:	ab03      	add	r3, sp, #12
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	462a      	mov	r2, r5
 8003174:	4b05      	ldr	r3, [pc, #20]	@ (800318c <_svfiprintf_r+0x1f0>)
 8003176:	a904      	add	r1, sp, #16
 8003178:	4638      	mov	r0, r7
 800317a:	f000 f879 	bl	8003270 <_printf_i>
 800317e:	e7ed      	b.n	800315c <_svfiprintf_r+0x1c0>
 8003180:	0800362c 	.word	0x0800362c
 8003184:	08003636 	.word	0x08003636
 8003188:	00000000 	.word	0x00000000
 800318c:	08002ee5 	.word	0x08002ee5
 8003190:	08003632 	.word	0x08003632

08003194 <_printf_common>:
 8003194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003198:	4616      	mov	r6, r2
 800319a:	4698      	mov	r8, r3
 800319c:	688a      	ldr	r2, [r1, #8]
 800319e:	690b      	ldr	r3, [r1, #16]
 80031a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80031a4:	4293      	cmp	r3, r2
 80031a6:	bfb8      	it	lt
 80031a8:	4613      	movlt	r3, r2
 80031aa:	6033      	str	r3, [r6, #0]
 80031ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80031b0:	4607      	mov	r7, r0
 80031b2:	460c      	mov	r4, r1
 80031b4:	b10a      	cbz	r2, 80031ba <_printf_common+0x26>
 80031b6:	3301      	adds	r3, #1
 80031b8:	6033      	str	r3, [r6, #0]
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	0699      	lsls	r1, r3, #26
 80031be:	bf42      	ittt	mi
 80031c0:	6833      	ldrmi	r3, [r6, #0]
 80031c2:	3302      	addmi	r3, #2
 80031c4:	6033      	strmi	r3, [r6, #0]
 80031c6:	6825      	ldr	r5, [r4, #0]
 80031c8:	f015 0506 	ands.w	r5, r5, #6
 80031cc:	d106      	bne.n	80031dc <_printf_common+0x48>
 80031ce:	f104 0a19 	add.w	sl, r4, #25
 80031d2:	68e3      	ldr	r3, [r4, #12]
 80031d4:	6832      	ldr	r2, [r6, #0]
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	42ab      	cmp	r3, r5
 80031da:	dc26      	bgt.n	800322a <_printf_common+0x96>
 80031dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80031e0:	6822      	ldr	r2, [r4, #0]
 80031e2:	3b00      	subs	r3, #0
 80031e4:	bf18      	it	ne
 80031e6:	2301      	movne	r3, #1
 80031e8:	0692      	lsls	r2, r2, #26
 80031ea:	d42b      	bmi.n	8003244 <_printf_common+0xb0>
 80031ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80031f0:	4641      	mov	r1, r8
 80031f2:	4638      	mov	r0, r7
 80031f4:	47c8      	blx	r9
 80031f6:	3001      	adds	r0, #1
 80031f8:	d01e      	beq.n	8003238 <_printf_common+0xa4>
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	6922      	ldr	r2, [r4, #16]
 80031fe:	f003 0306 	and.w	r3, r3, #6
 8003202:	2b04      	cmp	r3, #4
 8003204:	bf02      	ittt	eq
 8003206:	68e5      	ldreq	r5, [r4, #12]
 8003208:	6833      	ldreq	r3, [r6, #0]
 800320a:	1aed      	subeq	r5, r5, r3
 800320c:	68a3      	ldr	r3, [r4, #8]
 800320e:	bf0c      	ite	eq
 8003210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003214:	2500      	movne	r5, #0
 8003216:	4293      	cmp	r3, r2
 8003218:	bfc4      	itt	gt
 800321a:	1a9b      	subgt	r3, r3, r2
 800321c:	18ed      	addgt	r5, r5, r3
 800321e:	2600      	movs	r6, #0
 8003220:	341a      	adds	r4, #26
 8003222:	42b5      	cmp	r5, r6
 8003224:	d11a      	bne.n	800325c <_printf_common+0xc8>
 8003226:	2000      	movs	r0, #0
 8003228:	e008      	b.n	800323c <_printf_common+0xa8>
 800322a:	2301      	movs	r3, #1
 800322c:	4652      	mov	r2, sl
 800322e:	4641      	mov	r1, r8
 8003230:	4638      	mov	r0, r7
 8003232:	47c8      	blx	r9
 8003234:	3001      	adds	r0, #1
 8003236:	d103      	bne.n	8003240 <_printf_common+0xac>
 8003238:	f04f 30ff 	mov.w	r0, #4294967295
 800323c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003240:	3501      	adds	r5, #1
 8003242:	e7c6      	b.n	80031d2 <_printf_common+0x3e>
 8003244:	18e1      	adds	r1, r4, r3
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	2030      	movs	r0, #48	@ 0x30
 800324a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800324e:	4422      	add	r2, r4
 8003250:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003254:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003258:	3302      	adds	r3, #2
 800325a:	e7c7      	b.n	80031ec <_printf_common+0x58>
 800325c:	2301      	movs	r3, #1
 800325e:	4622      	mov	r2, r4
 8003260:	4641      	mov	r1, r8
 8003262:	4638      	mov	r0, r7
 8003264:	47c8      	blx	r9
 8003266:	3001      	adds	r0, #1
 8003268:	d0e6      	beq.n	8003238 <_printf_common+0xa4>
 800326a:	3601      	adds	r6, #1
 800326c:	e7d9      	b.n	8003222 <_printf_common+0x8e>
	...

08003270 <_printf_i>:
 8003270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003274:	7e0f      	ldrb	r7, [r1, #24]
 8003276:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003278:	2f78      	cmp	r7, #120	@ 0x78
 800327a:	4691      	mov	r9, r2
 800327c:	4680      	mov	r8, r0
 800327e:	460c      	mov	r4, r1
 8003280:	469a      	mov	sl, r3
 8003282:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003286:	d807      	bhi.n	8003298 <_printf_i+0x28>
 8003288:	2f62      	cmp	r7, #98	@ 0x62
 800328a:	d80a      	bhi.n	80032a2 <_printf_i+0x32>
 800328c:	2f00      	cmp	r7, #0
 800328e:	f000 80d1 	beq.w	8003434 <_printf_i+0x1c4>
 8003292:	2f58      	cmp	r7, #88	@ 0x58
 8003294:	f000 80b8 	beq.w	8003408 <_printf_i+0x198>
 8003298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800329c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80032a0:	e03a      	b.n	8003318 <_printf_i+0xa8>
 80032a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80032a6:	2b15      	cmp	r3, #21
 80032a8:	d8f6      	bhi.n	8003298 <_printf_i+0x28>
 80032aa:	a101      	add	r1, pc, #4	@ (adr r1, 80032b0 <_printf_i+0x40>)
 80032ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032b0:	08003309 	.word	0x08003309
 80032b4:	0800331d 	.word	0x0800331d
 80032b8:	08003299 	.word	0x08003299
 80032bc:	08003299 	.word	0x08003299
 80032c0:	08003299 	.word	0x08003299
 80032c4:	08003299 	.word	0x08003299
 80032c8:	0800331d 	.word	0x0800331d
 80032cc:	08003299 	.word	0x08003299
 80032d0:	08003299 	.word	0x08003299
 80032d4:	08003299 	.word	0x08003299
 80032d8:	08003299 	.word	0x08003299
 80032dc:	0800341b 	.word	0x0800341b
 80032e0:	08003347 	.word	0x08003347
 80032e4:	080033d5 	.word	0x080033d5
 80032e8:	08003299 	.word	0x08003299
 80032ec:	08003299 	.word	0x08003299
 80032f0:	0800343d 	.word	0x0800343d
 80032f4:	08003299 	.word	0x08003299
 80032f8:	08003347 	.word	0x08003347
 80032fc:	08003299 	.word	0x08003299
 8003300:	08003299 	.word	0x08003299
 8003304:	080033dd 	.word	0x080033dd
 8003308:	6833      	ldr	r3, [r6, #0]
 800330a:	1d1a      	adds	r2, r3, #4
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6032      	str	r2, [r6, #0]
 8003310:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003314:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003318:	2301      	movs	r3, #1
 800331a:	e09c      	b.n	8003456 <_printf_i+0x1e6>
 800331c:	6833      	ldr	r3, [r6, #0]
 800331e:	6820      	ldr	r0, [r4, #0]
 8003320:	1d19      	adds	r1, r3, #4
 8003322:	6031      	str	r1, [r6, #0]
 8003324:	0606      	lsls	r6, r0, #24
 8003326:	d501      	bpl.n	800332c <_printf_i+0xbc>
 8003328:	681d      	ldr	r5, [r3, #0]
 800332a:	e003      	b.n	8003334 <_printf_i+0xc4>
 800332c:	0645      	lsls	r5, r0, #25
 800332e:	d5fb      	bpl.n	8003328 <_printf_i+0xb8>
 8003330:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003334:	2d00      	cmp	r5, #0
 8003336:	da03      	bge.n	8003340 <_printf_i+0xd0>
 8003338:	232d      	movs	r3, #45	@ 0x2d
 800333a:	426d      	negs	r5, r5
 800333c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003340:	4858      	ldr	r0, [pc, #352]	@ (80034a4 <_printf_i+0x234>)
 8003342:	230a      	movs	r3, #10
 8003344:	e011      	b.n	800336a <_printf_i+0xfa>
 8003346:	6821      	ldr	r1, [r4, #0]
 8003348:	6833      	ldr	r3, [r6, #0]
 800334a:	0608      	lsls	r0, r1, #24
 800334c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003350:	d402      	bmi.n	8003358 <_printf_i+0xe8>
 8003352:	0649      	lsls	r1, r1, #25
 8003354:	bf48      	it	mi
 8003356:	b2ad      	uxthmi	r5, r5
 8003358:	2f6f      	cmp	r7, #111	@ 0x6f
 800335a:	4852      	ldr	r0, [pc, #328]	@ (80034a4 <_printf_i+0x234>)
 800335c:	6033      	str	r3, [r6, #0]
 800335e:	bf14      	ite	ne
 8003360:	230a      	movne	r3, #10
 8003362:	2308      	moveq	r3, #8
 8003364:	2100      	movs	r1, #0
 8003366:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800336a:	6866      	ldr	r6, [r4, #4]
 800336c:	60a6      	str	r6, [r4, #8]
 800336e:	2e00      	cmp	r6, #0
 8003370:	db05      	blt.n	800337e <_printf_i+0x10e>
 8003372:	6821      	ldr	r1, [r4, #0]
 8003374:	432e      	orrs	r6, r5
 8003376:	f021 0104 	bic.w	r1, r1, #4
 800337a:	6021      	str	r1, [r4, #0]
 800337c:	d04b      	beq.n	8003416 <_printf_i+0x1a6>
 800337e:	4616      	mov	r6, r2
 8003380:	fbb5 f1f3 	udiv	r1, r5, r3
 8003384:	fb03 5711 	mls	r7, r3, r1, r5
 8003388:	5dc7      	ldrb	r7, [r0, r7]
 800338a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800338e:	462f      	mov	r7, r5
 8003390:	42bb      	cmp	r3, r7
 8003392:	460d      	mov	r5, r1
 8003394:	d9f4      	bls.n	8003380 <_printf_i+0x110>
 8003396:	2b08      	cmp	r3, #8
 8003398:	d10b      	bne.n	80033b2 <_printf_i+0x142>
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	07df      	lsls	r7, r3, #31
 800339e:	d508      	bpl.n	80033b2 <_printf_i+0x142>
 80033a0:	6923      	ldr	r3, [r4, #16]
 80033a2:	6861      	ldr	r1, [r4, #4]
 80033a4:	4299      	cmp	r1, r3
 80033a6:	bfde      	ittt	le
 80033a8:	2330      	movle	r3, #48	@ 0x30
 80033aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80033ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80033b2:	1b92      	subs	r2, r2, r6
 80033b4:	6122      	str	r2, [r4, #16]
 80033b6:	f8cd a000 	str.w	sl, [sp]
 80033ba:	464b      	mov	r3, r9
 80033bc:	aa03      	add	r2, sp, #12
 80033be:	4621      	mov	r1, r4
 80033c0:	4640      	mov	r0, r8
 80033c2:	f7ff fee7 	bl	8003194 <_printf_common>
 80033c6:	3001      	adds	r0, #1
 80033c8:	d14a      	bne.n	8003460 <_printf_i+0x1f0>
 80033ca:	f04f 30ff 	mov.w	r0, #4294967295
 80033ce:	b004      	add	sp, #16
 80033d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	f043 0320 	orr.w	r3, r3, #32
 80033da:	6023      	str	r3, [r4, #0]
 80033dc:	4832      	ldr	r0, [pc, #200]	@ (80034a8 <_printf_i+0x238>)
 80033de:	2778      	movs	r7, #120	@ 0x78
 80033e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	6831      	ldr	r1, [r6, #0]
 80033e8:	061f      	lsls	r7, r3, #24
 80033ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80033ee:	d402      	bmi.n	80033f6 <_printf_i+0x186>
 80033f0:	065f      	lsls	r7, r3, #25
 80033f2:	bf48      	it	mi
 80033f4:	b2ad      	uxthmi	r5, r5
 80033f6:	6031      	str	r1, [r6, #0]
 80033f8:	07d9      	lsls	r1, r3, #31
 80033fa:	bf44      	itt	mi
 80033fc:	f043 0320 	orrmi.w	r3, r3, #32
 8003400:	6023      	strmi	r3, [r4, #0]
 8003402:	b11d      	cbz	r5, 800340c <_printf_i+0x19c>
 8003404:	2310      	movs	r3, #16
 8003406:	e7ad      	b.n	8003364 <_printf_i+0xf4>
 8003408:	4826      	ldr	r0, [pc, #152]	@ (80034a4 <_printf_i+0x234>)
 800340a:	e7e9      	b.n	80033e0 <_printf_i+0x170>
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	f023 0320 	bic.w	r3, r3, #32
 8003412:	6023      	str	r3, [r4, #0]
 8003414:	e7f6      	b.n	8003404 <_printf_i+0x194>
 8003416:	4616      	mov	r6, r2
 8003418:	e7bd      	b.n	8003396 <_printf_i+0x126>
 800341a:	6833      	ldr	r3, [r6, #0]
 800341c:	6825      	ldr	r5, [r4, #0]
 800341e:	6961      	ldr	r1, [r4, #20]
 8003420:	1d18      	adds	r0, r3, #4
 8003422:	6030      	str	r0, [r6, #0]
 8003424:	062e      	lsls	r6, r5, #24
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	d501      	bpl.n	800342e <_printf_i+0x1be>
 800342a:	6019      	str	r1, [r3, #0]
 800342c:	e002      	b.n	8003434 <_printf_i+0x1c4>
 800342e:	0668      	lsls	r0, r5, #25
 8003430:	d5fb      	bpl.n	800342a <_printf_i+0x1ba>
 8003432:	8019      	strh	r1, [r3, #0]
 8003434:	2300      	movs	r3, #0
 8003436:	6123      	str	r3, [r4, #16]
 8003438:	4616      	mov	r6, r2
 800343a:	e7bc      	b.n	80033b6 <_printf_i+0x146>
 800343c:	6833      	ldr	r3, [r6, #0]
 800343e:	1d1a      	adds	r2, r3, #4
 8003440:	6032      	str	r2, [r6, #0]
 8003442:	681e      	ldr	r6, [r3, #0]
 8003444:	6862      	ldr	r2, [r4, #4]
 8003446:	2100      	movs	r1, #0
 8003448:	4630      	mov	r0, r6
 800344a:	f7fc fec9 	bl	80001e0 <memchr>
 800344e:	b108      	cbz	r0, 8003454 <_printf_i+0x1e4>
 8003450:	1b80      	subs	r0, r0, r6
 8003452:	6060      	str	r0, [r4, #4]
 8003454:	6863      	ldr	r3, [r4, #4]
 8003456:	6123      	str	r3, [r4, #16]
 8003458:	2300      	movs	r3, #0
 800345a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800345e:	e7aa      	b.n	80033b6 <_printf_i+0x146>
 8003460:	6923      	ldr	r3, [r4, #16]
 8003462:	4632      	mov	r2, r6
 8003464:	4649      	mov	r1, r9
 8003466:	4640      	mov	r0, r8
 8003468:	47d0      	blx	sl
 800346a:	3001      	adds	r0, #1
 800346c:	d0ad      	beq.n	80033ca <_printf_i+0x15a>
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	079b      	lsls	r3, r3, #30
 8003472:	d413      	bmi.n	800349c <_printf_i+0x22c>
 8003474:	68e0      	ldr	r0, [r4, #12]
 8003476:	9b03      	ldr	r3, [sp, #12]
 8003478:	4298      	cmp	r0, r3
 800347a:	bfb8      	it	lt
 800347c:	4618      	movlt	r0, r3
 800347e:	e7a6      	b.n	80033ce <_printf_i+0x15e>
 8003480:	2301      	movs	r3, #1
 8003482:	4632      	mov	r2, r6
 8003484:	4649      	mov	r1, r9
 8003486:	4640      	mov	r0, r8
 8003488:	47d0      	blx	sl
 800348a:	3001      	adds	r0, #1
 800348c:	d09d      	beq.n	80033ca <_printf_i+0x15a>
 800348e:	3501      	adds	r5, #1
 8003490:	68e3      	ldr	r3, [r4, #12]
 8003492:	9903      	ldr	r1, [sp, #12]
 8003494:	1a5b      	subs	r3, r3, r1
 8003496:	42ab      	cmp	r3, r5
 8003498:	dcf2      	bgt.n	8003480 <_printf_i+0x210>
 800349a:	e7eb      	b.n	8003474 <_printf_i+0x204>
 800349c:	2500      	movs	r5, #0
 800349e:	f104 0619 	add.w	r6, r4, #25
 80034a2:	e7f5      	b.n	8003490 <_printf_i+0x220>
 80034a4:	0800363d 	.word	0x0800363d
 80034a8:	0800364e 	.word	0x0800364e

080034ac <memmove>:
 80034ac:	4288      	cmp	r0, r1
 80034ae:	b510      	push	{r4, lr}
 80034b0:	eb01 0402 	add.w	r4, r1, r2
 80034b4:	d902      	bls.n	80034bc <memmove+0x10>
 80034b6:	4284      	cmp	r4, r0
 80034b8:	4623      	mov	r3, r4
 80034ba:	d807      	bhi.n	80034cc <memmove+0x20>
 80034bc:	1e43      	subs	r3, r0, #1
 80034be:	42a1      	cmp	r1, r4
 80034c0:	d008      	beq.n	80034d4 <memmove+0x28>
 80034c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80034ca:	e7f8      	b.n	80034be <memmove+0x12>
 80034cc:	4402      	add	r2, r0
 80034ce:	4601      	mov	r1, r0
 80034d0:	428a      	cmp	r2, r1
 80034d2:	d100      	bne.n	80034d6 <memmove+0x2a>
 80034d4:	bd10      	pop	{r4, pc}
 80034d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80034da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80034de:	e7f7      	b.n	80034d0 <memmove+0x24>

080034e0 <_sbrk_r>:
 80034e0:	b538      	push	{r3, r4, r5, lr}
 80034e2:	4d06      	ldr	r5, [pc, #24]	@ (80034fc <_sbrk_r+0x1c>)
 80034e4:	2300      	movs	r3, #0
 80034e6:	4604      	mov	r4, r0
 80034e8:	4608      	mov	r0, r1
 80034ea:	602b      	str	r3, [r5, #0]
 80034ec:	f7fd fff4 	bl	80014d8 <_sbrk>
 80034f0:	1c43      	adds	r3, r0, #1
 80034f2:	d102      	bne.n	80034fa <_sbrk_r+0x1a>
 80034f4:	682b      	ldr	r3, [r5, #0]
 80034f6:	b103      	cbz	r3, 80034fa <_sbrk_r+0x1a>
 80034f8:	6023      	str	r3, [r4, #0]
 80034fa:	bd38      	pop	{r3, r4, r5, pc}
 80034fc:	20000200 	.word	0x20000200

08003500 <_realloc_r>:
 8003500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003504:	4607      	mov	r7, r0
 8003506:	4614      	mov	r4, r2
 8003508:	460d      	mov	r5, r1
 800350a:	b921      	cbnz	r1, 8003516 <_realloc_r+0x16>
 800350c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003510:	4611      	mov	r1, r2
 8003512:	f7ff bc5b 	b.w	8002dcc <_malloc_r>
 8003516:	b92a      	cbnz	r2, 8003524 <_realloc_r+0x24>
 8003518:	f7ff fbec 	bl	8002cf4 <_free_r>
 800351c:	4625      	mov	r5, r4
 800351e:	4628      	mov	r0, r5
 8003520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003524:	f000 f81a 	bl	800355c <_malloc_usable_size_r>
 8003528:	4284      	cmp	r4, r0
 800352a:	4606      	mov	r6, r0
 800352c:	d802      	bhi.n	8003534 <_realloc_r+0x34>
 800352e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003532:	d8f4      	bhi.n	800351e <_realloc_r+0x1e>
 8003534:	4621      	mov	r1, r4
 8003536:	4638      	mov	r0, r7
 8003538:	f7ff fc48 	bl	8002dcc <_malloc_r>
 800353c:	4680      	mov	r8, r0
 800353e:	b908      	cbnz	r0, 8003544 <_realloc_r+0x44>
 8003540:	4645      	mov	r5, r8
 8003542:	e7ec      	b.n	800351e <_realloc_r+0x1e>
 8003544:	42b4      	cmp	r4, r6
 8003546:	4622      	mov	r2, r4
 8003548:	4629      	mov	r1, r5
 800354a:	bf28      	it	cs
 800354c:	4632      	movcs	r2, r6
 800354e:	f7ff fbc3 	bl	8002cd8 <memcpy>
 8003552:	4629      	mov	r1, r5
 8003554:	4638      	mov	r0, r7
 8003556:	f7ff fbcd 	bl	8002cf4 <_free_r>
 800355a:	e7f1      	b.n	8003540 <_realloc_r+0x40>

0800355c <_malloc_usable_size_r>:
 800355c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003560:	1f18      	subs	r0, r3, #4
 8003562:	2b00      	cmp	r3, #0
 8003564:	bfbc      	itt	lt
 8003566:	580b      	ldrlt	r3, [r1, r0]
 8003568:	18c0      	addlt	r0, r0, r3
 800356a:	4770      	bx	lr

0800356c <_init>:
 800356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356e:	bf00      	nop
 8003570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003572:	bc08      	pop	{r3}
 8003574:	469e      	mov	lr, r3
 8003576:	4770      	bx	lr

08003578 <_fini>:
 8003578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357a:	bf00      	nop
 800357c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357e:	bc08      	pop	{r3}
 8003580:	469e      	mov	lr, r3
 8003582:	4770      	bx	lr
